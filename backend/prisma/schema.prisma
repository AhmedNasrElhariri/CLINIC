datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentType {
  Examination
  Followup
  Course
  Urgent
  Session
  Surgery
}

enum CourseType {
  Session
  Perunit

}

enum CourseStatus {
  InProgress
  Finished
  EarlyFinished
}

enum PayrollStatus {
  Open
  Close
}

enum PayrollTransactionType {
  Commision
  Advance
  Incentive
  Deduction
  Salary
}

enum LabStatus {
  Draft
  Pending
  Completed
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Waiting
}

enum Position {
  Admin
  Doctor
  Assistant
}

enum Sex {
  Female
  Male
}

enum FieldType {
  Text
  Number
  LongText
  Radio
  Check
  NestedSelector
}

enum PatientMembershipType {
  Primary
  Secondary
}

enum UnitOfMeaure {
  PerUnit
  Milligram
  Kilogram
  Millimeter
  Centimetre
  Tablet
  Stripe
}

enum InventoryOperation {
  Add
  Substract
}

enum PermissionAction {
  List_Appointment
  Create_Appointment
  Reschedule_Appointment
  Finish_Appointment
  Cancel_Appointment
  Archive_Appointment
  View_Patient
  View_Accounting
  AddRevenue_Accounting
  AddExpense_Accounting
  EditRevenue_Accounting
  EditExpense_Accounting
  Print_Accounting
  View_Calendar
  CreateEvent_Calendar
  View_Inventory
  AddItem_Inventory
  ViewHistory_Inventory
  DefineItem_Inventory
  Create_Course
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

model Organization {
  id               String             @id @default(uuid())
  name             String
  invoiceCounter   Int                @default(1)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
  item             Item[]
  hospital         Hospital[]
  surgeries        Surgery[]
  patientSurgeries PatientSurgery[]
  roles            PermissionRole[]
  permissions      Permission[]
  rules            Rule[]
  branches         Branch[]
  specialties      Specialty[]
  users            User[]
  userSpecialties  UserSpecialty[]
  patients         Patient[]
  inventoryItems   InventoryItem[]
  inventoryHistory InventoryHistory[]
  Payroll          Payroll[]
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  organization        Organization         @relation(fields: [organizationId], references: [id])
  organizationId      String
  permissions         Json                 @default("[]")
  avatar              String?
  role                PermissionRole?      @relation(fields: [roleId], references: [id])
  roleId              String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt @default(now())
  appointments        Appointment[]
  views               View[]
  viewStatus          ViewStatus[]
  workingHours        WorkingHours[]
  snippets            Snippet[]
  position            Position
  events              Event[]
  inventoryHistory    InventoryHistory[]
  rules               Rule[]
  specialties         UserSpecialty[]
  labDefinitions      LabDefinition[]
  imageDefinitions    ImageDefinition[]
  medicineDefinitions MedicineDefinition[]
  patientReports      PatientReport[]
  patients            Patient[]
  expenses            Expense[]
  revenues            Revenue[]
  configurations      Configuration?
  inventoryItem       InventoryItem[]
  item                Item[]
  timing              Timing[]
  labCategories       LabCategory[]
  imageCategories     ImageCategory[]
  CourseDefinition    CourseDefinition[]
  users               Course[]             @relation("user")
  doctors             Course[]             @relation("doctor")
  PayrollUser         PayrollUser[]
  SalesDefinition     SalesDefinition[]
  Sales               Sales[]
}

model Patient {
  id               String                @id @default(uuid())
  name             String
  phoneNo          String                @unique
  type             PatientMembershipType
  appointments     Appointment[]
  age              Int
  sex              Sex
  organization     Organization          @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User                  @relation(fields: [userId], references: [id])
  userId           String
  guardianName     String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt @default(now())
  medicineHistory  MedicineHistory[]
  familyHistory    FamilyHistory[]
  inventoryHistory InventoryHistory[]
  patientSurgeries PatientSurgery[]
  labs             Lab[]
  images           Image[]
  Course           Course[]
}

model Appointment {
  id               String             @id @default(uuid())
  date             DateTime           @default(now())
  type             AppointmentType
  patient          Patient            @relation(fields: [patientId], references: [id])
  patientId        String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  businessNotes    String             @default("")
  status           AppointmentStatus
  data             AppointmentField[]
  notes            String?            @default("")
  patientSurgeries PatientSurgery[]
  prescription     Prescription[]
  labs             Lab[]
  images           Image[]
  pictures         AppointmentFile[]
  courses          Course[]
  pulses           Int?
  powerOne         Int?
  powerTwo         Int?
  branch           Branch?            @relation(fields: [branchId], references: [id])
  branchId         String?
  specialty        Specialty?         @relation(fields: [specialtyId], references: [id])
  specialtyId      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model PulseControl {
  id        String   @id @default(uuid())
  before    Int      @default(0)
  after     Int      @default(0)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Prescription {
  id            String             @id @default(uuid())
  dose          String?
  medicine      MedicineDefinition @relation(fields: [medicineId], references: [id])
  medicineId    String
  timing        Timing             @relation(fields: [timingId], references: [id])
  timingId      String
  duration      Int?
  period        String?
  appointment   Appointment?       @relation(fields: [appointmentId], references: [id])
  appointmentId String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt @default(now())
}

model View {
  id                  String          @id @default(uuid())
  name                String
  type                AppointmentType @default(Examination)
  user                User            @relation(fields: [userId], references: [id])
  userId              String
  fieldGroups         FieldGroup[]
  activeViewsStatuses ViewStatus[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt @default(now())
}

model ViewStatus {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  activeView   View     @relation(fields: [activeViewId], references: [id])
  activeViewId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

model FieldGroup {
  id        String   @id @default(uuid())
  name      String
  order     Int
  view      View     @relation(fields: [viewId], references: [id])
  viewId    String
  fields    Field[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@unique([order, viewId], name: "order_viewId_unique_constraint")
}

model Field {
  id                String             @id @default(uuid())
  name              String
  order             Int
  type              FieldType
  choices           Json
  fieldGroup        FieldGroup?        @relation(fields: [fieldGroupId], references: [id])
  fieldGroupId      String?
  appointmentFields AppointmentField[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())

  @@unique([order, fieldGroupId], name: "order_fieldGroupId_unique_constraint")
}

model AppointmentField {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt @default(now())

  @@unique([appointmentId, fieldId], name: "appointment_fieldId_unique_constraint")
}

model File {
  id               String            @id @default(uuid())
  url              String
  filename         String
  mimetype         String?
  encoding         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt @default(now())
  lab              Lab[]
  image            Image[]
  appointmentFiles AppointmentFile[]
}

model AppointmentFile {
  comment       String?
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  file          File        @relation(fields: [fileId], references: [id])
  fileId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt @default(now())

  @@id(fileId)
}

model PayrollUser {
  id             String               @id @default(uuid())
  salary         Int
  user           User                 @relation(fields: [userId], references: [id])
  userId         String
  organizationId String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt @default(now())
  transactions   PayrollTransaction[]
}

model PayrollTransaction {
  id            String                 @id @default(uuid())
  amount        Int
  date          DateTime
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt @default(now())
  type          PayrollTransactionType
  payrollUser   PayrollUser?           @relation(fields: [payrollUserId], references: [id])
  payrollUserId String?
  payroll       Payroll                @relation(fields: [payrollId], references: [id])
  payrollId     String
}

model Payroll {
  id             String               @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt @default(now())
  status         PayrollStatus
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  transactions   PayrollTransaction[]
}

model Configuration {
  id                   String   @id @default(uuid())
  user                 User     @relation(fields: [userId], references: [id])
  userId               String
  enableInvoiceCounter Boolean  @default(false)
  sessions             Json     @default("[]")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt @default(now())

  @@unique([userId], name: "userid_unique_constraint")
}

model Week {
  id           String         @id @default(uuid())
  weekNo       Int
  year         Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt @default(now())
  WorkingHours WorkingHours[]

  @@unique([weekNo, year], name: "week_year_unique_constraint")
}

model WorkingHours {
  id        String   @id @default(uuid())
  week      Week     @relation(fields: [weekId], references: [id])
  weekId    String
  doctor    User     @relation(fields: [doctorId], references: [id])
  doctorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  start     DateTime
  end       DateTime
}

model Snippet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  title     String   @unique
  body      String
}

model Lab {
  id              String        @id @default(uuid())
  status          LabStatus
  requiredDate    DateTime      @default(now())
  resultDate      DateTime?
  value           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt @default(now())
  patient         Patient       @relation(fields: [patientId], references: [id])
  patientId       String
  labDefinition   LabDefinition @relation(fields: [labDefinitionId], references: [id])
  labDefinitionId String
  appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId   String
  documents       File[]
}

model Image {
  id                String          @id @default(uuid())
  status            LabStatus
  requiredDate      DateTime        @default(now())
  resultDate        DateTime?
  value             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt @default(now())
  patient           Patient         @relation(fields: [patientId], references: [id])
  patientId         String
  imageDefinition   ImageDefinition @relation(fields: [imageDefinitionId], references: [id])
  imageDefinitionId String
  appointment       Appointment     @relation(fields: [appointmentId], references: [id])
  appointmentId     String
  documents         File[]
}

model MedicineHistory {
  id           String    @id @default(uuid())
  medicineName String
  frequency    String?
  dose         String?
  fromDate     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt @default(now())
  patient      Patient   @relation(fields: [patientId], references: [id])
  patientId    String
}

model FamilyHistory {
  id        String   @id @default(uuid())
  disease   String
  relative  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
}

model Expense {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Revenue {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Notification {
  id         String   @id @default(uuid())
  notifierId String
  userId     String
  type       String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
  viewed     Boolean  @default(false)
  date       DateTime @default(now())
}

model Event {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  userId    String
  name      String
  start     DateTime
  end       DateTime
}

model Item {
  id               String             @id @default(uuid())
  name             String             @unique
  unitOfMeasure    UnitOfMeaure
  quantity         Int
  barcode          String?
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
  organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  inventoryItems   InventoryItem[]
  inventoryHistory InventoryHistory[]
}

model InventoryItem {
  quantity       Int
  item           Item         @relation(fields: [itemId], references: [id])
  itemId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  userId         String

  @@id([itemId, userId])
}

model InventoryHistory {
  id             String             @id @default(uuid())
  item           Item               @relation(fields: [itemId], references: [id])
  itemId         String
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  patient        Patient?           @relation(fields: [patientId], references: [id])
  patientId      String?
  operation      InventoryOperation
  quantity       Int
  price          Int?
  date           DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt @default(now())
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Hospital {
  id             String           @id @default(uuid())
  name           String
  phoneNo        String?
  address        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  PatientSurgery PatientSurgery[]
}

model LabDefinition {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  category  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  labs      Lab[]
}

model LabCategory {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Timing {
  id                String         @id @default(uuid())
  name              String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt @default(now())
  englishPrintValue String
  arabicPrintValue  String
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  prescriptions     Prescription[]
}

model ImageDefinition {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  category  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Image     Image[]
}

model SalesDefinition {
  id        String   @id @default(uuid())
  name      String
  price     Int
  cost      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Sales     Sales[]
}

model Sales {
  id                String          @id @default(uuid())
  quantity          Int
  totalPrice        Int
  totalCost         Int
  date              DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt @default(now())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  salesDefinition   SalesDefinition @relation(fields: [salesDefinitionId], references: [id])
  salesDefinitionId String

}

model CourseDefinition {
  id             String     @id @default(uuid())
  name           String
  type           CourseType
  price          Int
  units          Int
  messureOfUnits String
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt @default(now())
  Course         Course[]
}

model Course {
  id                 String           @id @default(uuid())
  price              Int
  paid               Int
  consumed           Int              @default(0)
  discount           Int
  startDate          DateTime
  endDate            DateTime
  status             CourseStatus
  sessions           Appointment[]
  patient            Patient          @relation(fields: [patientId], references: [id])
  patientId          String
  user               User             @relation("user", fields: [userId], references: [id])
  userId             String
  courseDefinition   CourseDefinition @relation(fields: [courseDefinitionId], references: [id])
  courseDefinitionId String
  doctor             User             @relation("doctor", fields: [doctorId], references: [id])
  doctorId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt @default(now())
}

model ImageCategory {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model MedicineDefinition {
  id            String         @id @default(uuid())
  name          String
  concentration String
  form          String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  prescriptions Prescription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt @default(now())
}

model PatientReport {
  id        String   @id @default(uuid())
  name      String
  body      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Surgery {
  id             String           @id @default(uuid())
  name           String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  patientSurgery PatientSurgery[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt @default(now())
}

model PatientSurgery {
  id             String       @id @default(uuid())
  patient        Patient      @relation(fields: [patientId], references: [id])
  patientId      String
  surgery        Surgery      @relation(fields: [surgeryId], references: [id])
  surgeryId      String
  hospital       Hospital     @relation(fields: [hospitalId], references: [id])
  hospitalId     String
  appointment    Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId  String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  date           DateTime
  fees           Int?
  hospitalFees   Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())
}

// permissions

enum PermissionLevel {
  Organization
  Branch
  Specialty
  User
}

model PermissionRole {
  id             String       @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  permissions    Permission[]
  users          User[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())
}

model Permission {
  id             String           @id @default(uuid())
  all            Boolean          @default(false)
  role           PermissionRole   @relation(fields: [roleId], references: [id])
  roleId         String
  action         PermissionAction
  level          PermissionLevel
  rules          Rule[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt @default(now())

  @@unique([action, roleId], name: "action_roleId_unique_constraint")
}

model Rule {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  permission     Permission   @relation(fields: [permissionId], references: [id])
  permissionId   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())
}

model Branch {
  id              String          @id @default(uuid())
  name            String
  address         String?
  phoneNo         String?
  notes           String?
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  String
  rules           Rule[]
  specialties     Specialty[]
  userSpecialties UserSpecialty[]
  Appointment     Appointment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model Specialty {
  id              String          @id @default(uuid())
  name            String
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  String
  rules           Rule[]
  branches        Branch[]
  userSpecialties UserSpecialty[]
  Appointment     Appointment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model UserSpecialty {
  id             String       @id @default(uuid())
  branch         Branch       @relation(fields: [branchId], references: [id])
  branchId       String
  specialty      Specialty    @relation(fields: [specialtyId], references: [id])
  specialtyId    String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())

  @@unique([userId, branchId], name: "userId_branchId_unique_constraint")
}

// end permission
