datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentType {
  Examination
  Followup
  Urgent
  Session
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Done
  Closed
}

enum Position {
  Doctor
  Assistant
}

enum Sex {
  Female
  Male
}

enum Specialty {
  Dentistry
}

enum FieldType {
  Text
  Number
  LongText
}

enum PatientMembershipType {
  Primary
  Secondary
}

enum UnitOfMeaure {
  PerUnit
  Milligram
  Kilogram
  Millimeter
  Centimetre
  Tablet
  Stripe
}

enum InventoryOperation {
  Add
  Substract
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

model Organization {
  id             String           @id @default(uuid())
  name           String
  Item           Item[]
  Hospital       Hospital[]
  Surgery        Surgery[]
  PatientSurgery PatientSurgery[]
}

model User {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  password         String
  organizationId   String
  Appointment      Appointment[]
  View             View[]
  ViewStatus       ViewStatus[]
  clinics          Clinic[]           @relation(references: [id])
  WorkingHours     WorkingHours[]
  Snippet          Snippet[]
  permissions      Json               @default("[]")
  avatar           String?
  position         Position
  events           Event[]
  InventoryHistory InventoryHistory[]
}

model Patient {
  id               String                @id @default(uuid())
  name             String
  phoneNo          String                @unique
  type             PatientMembershipType
  appointments     Appointment[]
  age              Int
  sex              Sex
  organizationId   String
  guardianName     String?
  pateintLab       PatientLab[]
  MedicalHistory   MedicalHistory[]
  FamilyHistory    FamilyHistory[]
  InventoryHistory InventoryHistory[]
  PatientSurgery   PatientSurgery[]
}

model Appointment {
  id           String             @id @default(uuid())
  date         DateTime           @default(now())
  type         AppointmentType
  patient      Patient            @relation(fields: [patientId], references: [id])
  patientId    String
  specialty    Specialty
  doctor       User               @relation(fields: [doctorId], references: [id])
  doctorId     String
  labs         String?            @default("[]")
  status       AppointmentStatus
  data         AppointmentField[]
  collections  Collection[]
  clinic       Clinic             @relation(fields: [clinicId], references: [id])
  clinicId     String
  notes        String?            @default("")
  prescription String?            @default("")
}

model View {
  id                   String       @id @default(uuid())
  name                 String
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  fieldGroups          FieldGroup[]
  defaultViewsStatuses ViewStatus[] @relation("defaultView")
  activeViewsStatuses  ViewStatus[] @relation("activeView")
}

model ViewStatus {
  id            String @id @default(uuid())
  user          User   @relation(fields: [userId], references: [id])
  userId        String
  defaultView   View   @relation("defaultView", fields: [defaultViewId], references: [id])
  defaultViewId String
  activeView    View   @relation("activeView", fields: [activeViewId], references: [id])
  activeViewId  String

  @@unique([userId, defaultViewId, activeViewId], name: "userId_defaultViewId_activeViewId_unique_constraint")
}

model FieldGroup {
  id     String  @id @default(uuid())
  name   String
  order  Int
  view   View    @relation(fields: [viewId], references: [id])
  viewId String
  fields Field[]

  @@unique([order, viewId], name: "order_viewId_unique_constraint")
}

model Field {
  id                String             @id @default(uuid())
  name              String
  order             Int
  type              FieldType
  required          Boolean
  fieldGroup        FieldGroup?        @relation(fields: [fieldGroupId], references: [id])
  fieldGroupId      String?
  appointmentFields AppointmentField[]

  @@unique([order, fieldGroupId], name: "order_fieldGroupId_unique_constraint")
}

model AppointmentField {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String
  value         String

  @@unique([appointmentId, fieldId], name: "appointment_fieldId_unique_constraint")
}

model File {
  id           String        @id @default(uuid())
  url          String
  filename     String
  comment      String?
  collection   Collection?   @relation(fields: [collectionId], references: [id])
  collectionId String?
  mimetype     String?
  encoding     String?
  clinic       Clinic[]
  labDocument  LabDocument[]
}

model Clinic {
  id                String  @id @default(uuid())
  name              String?
  examinationPrice  Int     @default(0)
  followupPrice     Int     @default(0)
  urgentPrice       Int     @default(0)
  duration          Int     @default(5)
  appointmentsCount Int     @default(20)


  // shown in prescription
  doctorName             String? @default("")
  doctorNameAr           String? @default("")
  doctorTitle            String? @default("")
  doctorTitleAr          String? @default("")
  doctorJobDescription   String? @default("")
  doctorJobDescriptionAr String? @default("")
  phoneNo                String? @default("")
  phoneNo1               String? @default("")
  address                String? @default("")
  address1               String? @default("")

  logo             File?              @relation(fields: [logoId], references: [id])
  logoId           String?
  users            User[]             @relation(references: [id])
  organizationId   String
  expense          Expense[]
  revenue          Revenue[]
  appointment      Appointment[]
  sessions         Json               @default("[]")
  InventoryItem    InventoryItem[]
  InventoryHistory InventoryHistory[]
}

model Week {
  id     String @id @default(uuid())
  weekNo Int
  year   Int

  WorkingHours WorkingHours[]
  @@unique([weekNo, year], name: "week_year_unique_constraint")
}

model WorkingHours {
  id       String   @id @default(uuid())
  week     Week     @relation(fields: [weekId], references: [id])
  weekId   String
  doctor   User     @relation(fields: [doctorId], references: [id])
  doctorId String
  start    DateTime
  end      DateTime
}

model Snippet {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  title  String @unique
  body   String
}

model PatientLab {
  id        String        @id @default(uuid())
  patient   Patient       @relation(fields: [patientId], references: [id])
  patientId String
  name      String
  documents LabDocument[]

  @@unique([name, patientId], name: "name_patientId_unique_constraint")
}

model LabDocument {
  id           String     @id @default(uuid())
  file         File       @relation(fields: [fileId], references: [id])
  fileId       String
  patientLab   PatientLab @relation(fields: [patientLabId], references: [id])
  patientLabId String
}

model MedicalHistory {
  id           String    @id @default(uuid())
  medicineName String
  frequency    String?
  dose         String?
  fromDate     DateTime?
  patient      Patient   @relation(fields: [patientId], references: [id])
  patientId    String
}

model FamilyHistory {
  id        String  @id @default(uuid())
  disease   String
  relative  String
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

model Expense {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  clinicId  String
}

model Revenue {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  clinicId  String
}

model Notification {
  id         String   @id @default(uuid())
  notifierId String
  userId     String
  type       String
  message    String
  viewed     Boolean  @default(false)
  date       DateTime @default(now())
}

model Event {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  name   String
  start  DateTime
  end    DateTime
}

model Collection {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  caption       String      @default("")
  images        File[]
}

model Item {
  id               String             @id @default(uuid())
  name             String             @unique
  unitOfMeasure    UnitOfMeaure
  quantity         Int
  barcode          String?
  notes            String?
  organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   String
  InventoryItem    InventoryItem[]
  InventoryHistory InventoryHistory[]
}

model InventoryItem {
  quantity Int
  item     Item   @relation(fields: [itemId], references: [id])
  itemId   String
  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId String

  @@id([itemId, clinicId])
}

model InventoryHistory {
  id        String             @id @default(uuid())
  item      Item               @relation(fields: [itemId], references: [id])
  itemId    String
  clinic    Clinic             @relation(fields: [clinicId], references: [id])
  clinicId  String
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  patient   Patient?           @relation(fields: [patientId], references: [id])
  patientId String?
  operation InventoryOperation
  quantity  Int
  price     Int?
  date      DateTime
}

model Hospital {
  id             String           @id @default(uuid())
  name           String
  phoneNo        String?
  address        String?
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  PatientSurgery PatientSurgery[]
}

model Surgery {
  id             String           @id @default(uuid())
  name           String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  PatientSurgery PatientSurgery[]
}

model PatientSurgery {
  id             String       @id @default(uuid())
  patient        Patient      @relation(fields: [patientId], references: [id])
  patientId      String
  surgery        Surgery      @relation(fields: [surgeryId], references: [id])
  surgeryId      String
  hospital       Hospital     @relation(fields: [hospitalId], references: [id])
  hospitalId     String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  date           DateTime
  fees           Int?
}
