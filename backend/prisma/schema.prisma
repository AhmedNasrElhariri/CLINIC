datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentType {
  Examination
  Followup
  Course
  Urgent
  Session
  Surgery
}

enum CourseType {
  Session
  Perunit

}

enum AnesthesiaType {
  General
  Regional
  Local
}

enum CouponStatus {
  Active
  Used
  Expired
  Remaining
}

enum CourseStatus {
  InProgress
  Finished
  EarlyFinished
  Cancelled
  Rejected
}

enum PayrollStatus {
  Open
  Close
}

enum PayrollTransactionType {
  Commision
  Advance
  Incentive
  Deduction
  Salary
}

enum LabStatus {
  Draft
  Pending
  Completed
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Waiting
}

enum Position {
  Admin
  Doctor
  Assistant
}

enum Sex {
  Female
  Male
}

enum FieldType {
  Text
  Number
  LongText
  Radio
  Check
  NestedSelector
}

enum PatientMembershipType {
  Primary
  Secondary
}

enum UnitOfMeaure {
  PerUnit
  Milligram
  Kilogram
  Millimeter
  Centimetre
  Tablet
  Stripe
}

enum InventoryOperation {
  Add
  Substract
}

enum PermissionAction {
  List_Appointment
  Create_Appointment
  Reschedule_Appointment
  Acc_Appointment
  Cancel_Appointment
  Archive_Appointment
  View_Patient
  View_Accounting
  AddRevenue_Accounting
  AddExpense_Accounting
  EditRevenue_Accounting
  EditExpense_Accounting
  ViewBank_Accounting
  ViewInsurance_Accounting
  Print_Accounting
  View_Calendar
  CreateEvent_Calendar
  View_Inventory
  AddItem_Inventory
  ViewHistory_Inventory
  DefineItem_Inventory
  Create_Course
  Create_SessionDefinition
  Create_Hospital
  Create_Surgery
  View_Payroll
  CreateCommission_Payroll
  CreateDeduction_Payroll
  CreateIncentives_Payroll
  CreateAdvance_Payroll
  CreatePayslips_Payroll
  Define_Sales
  Create_Sales
  View_Sales
  Create_Patient
  CreateSocialReport_Patient
  CreateAreaReport_Patient
  ViewSessions_Patient
  ViewLabs_Patient
  ViewImages_Patient
  ViewCourses_Patient
  ViewSessionsPulses_Patient
  GenerateMonthly_PulsesReport
  GenerateDaily_PulsesReport
  View_Medicine
  View_Permission
  ViewFilters_Accounting
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

model Organization {
  id                        String                      @id @default(uuid())
  name                      String
  invoiceCounter            Int                         @default(1)
  maxNumberOfUsers          Int                         @default(6)
  patientCode               Int                         @default(1000)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  item                      Item[]
  hospital                  Hospital[]
  surgeries                 Surgery[]
  patientSurgeries          PatientSurgery[]
  roles                     PermissionRole[]
  permissions               Permission[]
  rules                     Rule[]
  configurations            Configuration?
  branches                  Branch[]
  specialties               Specialty[]
  users                     User[]
  userSpecialties           UserSpecialty[]
  patients                  Patient[]
  inventoryItems            InventoryItem[]
  inventoryHistory          InventoryHistory[]
  Payroll                   Payroll[]
  SalesDefinition           SalesDefinition[]
  Sales                     Sales[]
  CourseDefinition          CourseDefinition[]
  AppointmentTypeDefinition AppointmentTypeDefinition[]
  BankDefinition            BankDefinition[]
  CompanyDefinition         CompanyDefinition[]
  CompanySessionDefinition  CompanySessionDefinition[]
  ExpenseTypeDefinition     ExpenseTypeDefinition[]
  Price                     Price[]
  SessionDefinition         SessionDefinition[]
  Expense                   Expense[]
  Revenue                   Revenue[]
  BankRevenue               BankRevenue[]
  InsuranceRevenue          InsuranceRevenue[]
  Timing                    Timing[]
  ImageDefinition           ImageDefinition[]
  FacePartation             FacePartation[]
  FaceOperation             FaceOperation[]
  MaterialDefinition        MaterialDefinition[]
  LabDefinition             LabDefinition[]
  LabCategory               LabCategory[]
  ImageCategory             ImageCategory[]
  DentalDiagnosisDefinition DentalDiagnosisDefinition[]
  Tooth                     Tooth[]
  ToothTransaction          ToothTransaction[]
  PageSetup                 PageSetup[]
  SessionTransaction        SessionTransaction[]
  Points                    Points[]
  Coupon                    Coupon[]
}

model User {
  id                        String                      @id @default(uuid())
  name                      String
  email                     String                      @unique
  allowedViews              Json                        @default("[]")
  password                  String
  organization              Organization                @relation(fields: [organizationId], references: [id])
  organizationId            String
  avatar                    String?
  role                      PermissionRole?             @relation(fields: [roleId], references: [id])
  roleId                    String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  views                     View[]
  viewStatus                ViewStatus[]
  patientViews              PatientView[]               @relation("userPatientView")
  patientDoctorsViews       PatientView[]               @relation("doctorPatientView")
  workingHours              WorkingHours[]
  snippets                  Snippet[]
  position                  Position
  events                    Event[]
  user                      Appointment[]               @relation("userApp")
  doctor                    Appointment[]               @relation("doctorApp")
  rules                     Rule[]
  specialties               UserSpecialty[]
  labDefinitions            LabDefinition[]
  imageDefinitions          ImageDefinition[]
  facePartation             FacePartation[]
  faceOperation             FaceOperation[]
  materialDefinitions       MaterialDefinition[]
  medicineDefinitions       MedicineDefinition[]        @relation("medicineUser")
  medicineDefinitionsDoctor MedicineDefinition[]        @relation("medicineDoctor")
  patientReports            PatientReport[]
  patients                  Patient[]
  expenses                  Expense[]                   @relation("expenseUser")
  expensesDoctor            Expense[]                   @relation("expenseDoctor")
  revenues                  Revenue[]                   @relation("revenueUser")
  revenuesDoctor            Revenue[]                   @relation("revenueDoctor")
  item                      Item[]
  timing                    Timing[]
  labCategories             LabCategory[]
  imageCategories           ImageCategory[]
  users                     Course[]                    @relation("user")
  doctors                   Course[]                    @relation("doctor")
  BankRevenue               BankRevenue[]               @relation("bankUser")
  BankRevenueDoctor         BankRevenue[]               @relation("bankDoctor")
  InsuranceRevenue          InsuranceRevenue[]          @relation("insuranceUser")
  InsuranceRevenueDoctor    InsuranceRevenue[]          @relation("insuranceDoctor")
  CoursePayment             CoursePayment[]             @relation("coursePaymentUser")
  CoursePaymentDoctor       CoursePayment[]             @relation("coursePaymentDoctor")
  PayrollUser               PayrollUser[]
  Sales                     Sales[]
  Price                     Price[]
  Hospital                  Hospital[]
  Surgery                   Surgery[]
  SalesDefinition           SalesDefinition[]
  UserInventoryItem         InventoryItem[]             @relation("userInventoryItem")
  DoctorInventoryItem       InventoryItem[]             @relation("doctorInventoryItem")
  InventoryHistory          InventoryHistory[]          @relation("userInventory")
  DentalDiagnosisDefinition DentalDiagnosisDefinition[]
  Tooth                     Tooth[]
  ToothTransaction          ToothTransaction[]          @relation("toothUser")
  ToothTransactionDoctors   ToothTransaction[]          @relation("toothDoctor")
  PatientViewStatus         PatientViewStatus[]
  PatientField              PatientField[]
  SessionTransaction        SessionTransaction[]
}

model Patient {
  id               String                @id @default(uuid())
  name             String
  phoneNo          String                @unique
  type             PatientMembershipType
  appointments     Appointment[]
  age              Int
  date             DateTime              @default(now())
  codeNumber       Int                   @default(autoincrement())
  code             String?
  points           Int                   @default(0)
  sex              Sex
  reference        Json                  @default("[]")
  area             String                @default("")
  organization     Organization          @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User                  @relation(fields: [userId], references: [id])
  userId           String
  guardianName     String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @default(now()) @updatedAt
  medicineHistory  MedicineHistory[]
  familyHistory    FamilyHistory[]
  inventoryHistory InventoryHistory[]
  patientSurgeries PatientSurgery[]
  labs             Lab[]
  images           Image[]
  Course           Course[]
  Tooth            Tooth[]
  FaceOperation    FaceOperation[]
  FacePartation    FacePartation[]
  PatientField     PatientField[]
  Coupon           Coupon[]
}

model Appointment {
  id               String             @id @default(uuid())
  date             DateTime           @default(now())
  type             AppointmentType
  patient          Patient            @relation(fields: [patientId], references: [id])
  patientId        String
  user             User               @relation("userApp", fields: [userId], references: [id])
  userId           String
  doctor           User               @relation("doctorApp", fields: [doctorId], references: [id])
  doctorId         String
  businessNotes    String             @default("")
  accounted        Boolean            @default(false)
  duration         Int                @default(5)
  status           AppointmentStatus
  data             AppointmentField[]
  notes            String?            @default("")
  patientSurgeries PatientSurgery[]
  prescription     Prescription[]
  labs             Lab[]
  images           Image[]
  pictures         AppointmentFile[]
  courses          Course[]
  pulses           Int?
  powerOne         Int?
  powerTwo         Int?
  sessionsPulses   Json?              @default("[]")
  branch           Branch?            @relation(fields: [branchId], references: [id])
  branchId         String?
  specialty        Specialty?         @relation(fields: [specialtyId], references: [id])
  specialtyId      String?
  session          SessionDefinition? @relation(fields: [sessionId], references: [id])
  sessionId        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

model PulseControl {
  id        String   @id @default(uuid())
  before    Int      @default(0)
  after     Int      @default(0)
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Coupon {
  id             String       @id @default(uuid())
  date           DateTime
  status         CouponStatus
  value          Int
  remaining      Int          @default(0)
  expireDate     DateTime     @default(now())
  patient        Patient      @relation(fields: [patientId], references: [id])
  patientId      String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Prescription {
  id            String             @id @default(uuid())
  dose          String?
  medicine      MedicineDefinition @relation(fields: [medicineId], references: [id])
  medicineId    String
  timing        Timing             @relation(fields: [timingId], references: [id])
  timingId      String
  duration      Int?
  period        String?
  appointment   Appointment?       @relation(fields: [appointmentId], references: [id])
  appointmentId String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
}

model View {
  id                  String          @id @default(uuid())
  name                String
  type                AppointmentType @default(Examination)
  user                User            @relation(fields: [userId], references: [id])
  userId              String
  fieldGroups         FieldGroup[]
  activeViewsStatuses ViewStatus[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now()) @updatedAt
}

model PatientView {
  id                String              @id @default(uuid())
  name              String
  doctor            User                @relation("doctorPatientView", fields: [doctorId], references: [id])
  doctorId          String
  user              User                @relation("userPatientView", fields: [userId], references: [id])
  userId            String
  fieldGroups       FieldGroup[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  PatientViewStatus PatientViewStatus[]
}

model ViewStatus {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  activeView   View     @relation(fields: [activeViewId], references: [id])
  activeViewId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

}

model PatientViewStatus {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  activeView   PatientView @relation(fields: [activeViewId], references: [id])
  activeViewId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

model FieldGroup {
  id            String       @id @default(uuid())
  name          String
  order         Int
  view          View?        @relation(fields: [viewId], references: [id])
  viewId        String?
  fields        Field[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  PatientView   PatientView? @relation(fields: [patientViewId], references: [id])
  patientViewId String?

  @@unique([order, viewId], name: "order_viewId_unique_constraint")
}

model Field {
  id                String             @id @default(uuid())
  name              String
  order             Int
  type              FieldType
  choices           Json?
  fieldGroup        FieldGroup?        @relation(fields: [fieldGroupId], references: [id])
  fieldGroupId      String?
  appointmentFields AppointmentField[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  PatientField PatientField[]
  @@unique([order, fieldGroupId], name: "order_fieldGroupId_unique_constraint")
}

model AppointmentField {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@unique([appointmentId, fieldId], name: "appointment_fieldId_unique_constraint")
}

model PatientField {
  id        String   @id @default(uuid())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  field     Field    @relation(fields: [fieldId], references: [id])
  fieldId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([patientId, fieldId], name: "patient_fieldId_unique_constraint")
}

model File {
  id               String            @id @default(uuid())
  url              String
  filename         String
  mimetype         String?
  encoding         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  lab              Lab[]
  image            Image[]
  appointmentFiles AppointmentFile[]
}

model AppointmentFile {
  comment       String?
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  file          File        @relation(fields: [fileId], references: [id])
  fileId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@id([fileId])
}

model PayrollUser {
  id                           String                         @id @default(uuid())
  user                         User                           @relation(fields: [userId], references: [id])
  userId                       String
  salary                       Int
  organizationId               String
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  transactions                 PayrollTransaction[]
  TransactionCoursesTimeFrame  TransactionCoursesTimeFrame[]
  TransactionRevenuesTimeFrame TransactionRevenuesTimeFrame[]
}

model PayrollTransaction {
  id            String                 @id @default(uuid())
  amount        Int
  reason        String                 @default(" ")
  date          DateTime
  status        String                 @default("on")
  added         Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now()) @updatedAt
  type          PayrollTransactionType
  payrollUser   PayrollUser?           @relation(fields: [payrollUserId], references: [id])
  payrollUserId String?
  payroll       Payroll                @relation(fields: [payrollId], references: [id])
  payrollId     String
}

model TransactionCoursesTimeFrame {
  id            String      @id @default(uuid())
  date          DateTime
  payrollUser   PayrollUser @relation(fields: [payrollUserId], references: [id])
  payrollUserId String

  @@unique([payrollUserId], name: "payrollUserId_unique_constraint")
}

model TransactionRevenuesTimeFrame {
  id            String      @id @default(uuid())
  date          DateTime
  payrollUser   PayrollUser @relation(fields: [payrollUserId], references: [id])
  payrollUserId String

  @@unique([payrollUserId], name: "payrollUserId_Revenues_unique_constraint")
}

model Payroll {
  id             String               @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  status         PayrollStatus
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  transactions   PayrollTransaction[]
}

model Configuration {
  id                   String       @id @default(uuid())
  organization         Organization @relation(fields: [organizationId], references: [id])
  organizationId       String
  enableInvoiceCounter Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt

  @@unique([organizationId], name: "organizationId_unique_constraint")
}

model PageSetup {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  top            Int          @default(0)
  right          Int          @default(0)
  bottom         Int          @default(0)
  left           Int          @default(0)
  type           String       @default("Letter")
}

model Week {
  id           String         @id @default(uuid())
  weekNo       Int
  year         Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  WorkingHours WorkingHours[]

  @@unique([weekNo, year], name: "week_year_unique_constraint")
}

model WorkingHours {
  id        String   @id @default(uuid())
  week      Week     @relation(fields: [weekId], references: [id])
  weekId    String
  doctor    User     @relation(fields: [doctorId], references: [id])
  doctorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  start     DateTime
  end       DateTime
}

model Snippet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  title     String   @unique
  body      String
}

model Lab {
  id              String        @id @default(uuid())
  status          LabStatus
  requiredDate    DateTime      @default(now())
  resultDate      DateTime?
  value           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  patient         Patient       @relation(fields: [patientId], references: [id])
  patientId       String
  labDefinition   LabDefinition @relation(fields: [labDefinitionId], references: [id])
  labDefinitionId String
  appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId   String
  documents       File[]
}

model Image {
  id                String          @id @default(uuid())
  status            LabStatus
  requiredDate      DateTime        @default(now())
  resultDate        DateTime?
  value             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  patient           Patient         @relation(fields: [patientId], references: [id])
  patientId         String
  imageDefinition   ImageDefinition @relation(fields: [imageDefinitionId], references: [id])
  imageDefinitionId String
  appointment       Appointment     @relation(fields: [appointmentId], references: [id])
  appointmentId     String
  documents         File[]
}

model MedicineHistory {
  id           String    @id @default(uuid())
  medicineName String
  frequency    String?
  dose         String?
  fromDate     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  patient      Patient   @relation(fields: [patientId], references: [id])
  patientId    String
}

model FamilyHistory {
  id        String   @id @default(uuid())
  disease   String
  relative  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
}

model Expense {
  id             String       @id @default(uuid())
  name           String
  date           DateTime
  amount         Int
  expenseType    String
  invoiceNo      String?
  level          String?
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  user           User         @relation("expenseUser", fields: [userId], references: [id])
  userId         String
  doctor         User?        @relation("expenseDoctor", fields: [doctorId], references: [id])
  doctorId       String?
}

model Revenue {
  id             String       @id @default(uuid())
  name           String
  date           DateTime
  amount         Float
  invoiceNo      String?
  level          String?
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  user           User         @relation("revenueUser", fields: [userId], references: [id])
  userId         String
  doctor         User?        @relation("revenueDoctor", fields: [doctorId], references: [id])
  doctorId       String?
}

model BankRevenue {
  id             String         @id @default(uuid())
  name           String
  date           DateTime
  amount         Float
  invoiceNo      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  user           User           @relation("bankUser", fields: [userId], references: [id])
  userId         String
  doctor         User?          @relation("bankDoctor", fields: [doctorId], references: [id])
  doctorId       String?
  level          String?
  specialty      Specialty?     @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?        @relation(fields: [branchId], references: [id])
  branchId       String?
  bank           BankDefinition @relation(fields: [bankId], references: [id])
  bankId         String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
}

model InsuranceRevenue {
  id             String            @id @default(uuid())
  name           String
  date           DateTime
  amount         Int
  invoiceNo      String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  user           User              @relation("insuranceUser", fields: [userId], references: [id])
  userId         String
  doctor         User?             @relation("insuranceDoctor", fields: [doctorId], references: [id])
  doctorId       String?
  level          String?
  specialty      Specialty?        @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?           @relation(fields: [branchId], references: [id])
  branchId       String?
  company        CompanyDefinition @relation(fields: [companyId], references: [id])
  companyId      String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Notification {
  id         String   @id @default(uuid())
  notifierId String
  userId     String
  type       String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  viewed     Boolean  @default(false)
  date       DateTime @default(now())
}

model Event {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  name      String
  start     DateTime
  end       DateTime
}

model Item {
  id               String             @id @default(uuid())
  name             String             @unique
  unitOfMeasure    UnitOfMeaure
  quantity         Int
  barcode          String?
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  inventoryItems   InventoryItem[]
  inventoryHistory InventoryHistory[]
}

model InventoryItem {
  id             String       @id @default(uuid())
  quantity       Int
  price          Int
  item           Item         @relation(fields: [itemId], references: [id])
  itemId         String
  level          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  user           User         @relation("userInventoryItem", fields: [userId], references: [id])
  doctor         User?        @relation("doctorInventoryItem", fields: [doctorId], references: [id])
  branch         Branch?      @relation(fields: [branchId], references: [id])
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  userId         String
  doctorId       String?
  branchId       String?
  specialtyId    String?
}

model InventoryHistory {
  id             String             @id @default(uuid())
  item           Item               @relation(fields: [itemId], references: [id])
  itemId         String
  user           User               @relation("userInventory", fields: [userId], references: [id])
  userId         String
  patient        Patient?           @relation(fields: [patientId], references: [id])
  patientId      String?
  operation      InventoryOperation
  quantity       Int
  price          Int?
  date           DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now()) @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Hospital {
  id             String           @id @default(uuid())
  name           String
  phoneNo        String?
  address        String?
  level          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  specialty      Specialty?       @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?          @relation(fields: [branchId], references: [id])
  branchId       String?
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  PatientSurgery PatientSurgery[]
}

model LabDefinition {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  category       LabCategory  @relation(fields: [categoryId], references: [id])
  categoryId     String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  labs           Lab[]
}

model LabCategory {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  LabDefinition  LabDefinition[]
}

model Timing {
  id                String         @id @default(uuid())
  name              String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  englishPrintValue String
  arabicPrintValue  String
  organization      Organization   @relation(fields: [organizationId], references: [id])
  organizationId    String
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  prescriptions     Prescription[]
}

model ImageDefinition {
  id             String        @id @default(uuid())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  category       ImageCategory @relation(fields: [categoryId], references: [id])
  categoryId     String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  Image          Image[]
}

model MaterialDefinition {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  FaceOperation  FaceOperation[]
}

model DentalDiagnosisDefinition {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  ToothTransaction ToothTransaction[]
}

model Tooth {
  id               String             @id @default(uuid())
  toothNumber      Int
  toothPartNumber  Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  patient          Patient            @relation(fields: [patientId], references: [id])
  patientId        String
  organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  ToothTransaction ToothTransaction[]

  @@unique([toothNumber, toothPartNumber, patientId], name: "toothNumber_toothPartNumber_patientId_unique_constraint")
}

model FacePartation {
  id             String          @id @default(uuid())
  number         Int
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  patient        Patient         @relation(fields: [patientId], references: [id])
  patientId      String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  FaceOperation  FaceOperation[]
}

model FaceOperation {
  id             String             @id @default(uuid())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now()) @updatedAt
  date           DateTime           @default(now())
  units          String
  patient        Patient            @relation(fields: [patientId], references: [id])
  patientId      String
  material       MaterialDefinition @relation(fields: [materialId], references: [id])
  materialId     String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  facePartation  FacePartation      @relation(fields: [partationId], references: [id])
  partationId    String
}

model ToothTransaction {
  id              String                    @id @default(uuid())
  date            DateTime                  @default(now())
  depth           String
  tooth           Tooth                     @relation(fields: [toothId], references: [id])
  toothId         String
  dentalDiagnosis DentalDiagnosisDefinition @relation(fields: [diagnosisId], references: [id])
  diagnosisId     String
  organization    Organization              @relation(fields: [organizationId], references: [id])
  organizationId  String
  user            User                      @relation("toothUser", fields: [userId], references: [id])
  userId          String
  doctor          User                      @relation("toothDoctor", fields: [doctorId], references: [id])
  doctorId        String
}

model Price {
  id             String       @id @default(uuid())
  Apptype        String
  price          Int
  level          String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model SessionDefinition {
  id                 String               @id @default(uuid())
  name               String
  price              Float
  duration           Int                  @default(5)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  organization       Organization         @relation(fields: [organizationId], references: [id])
  organizationId     String
  Appointment        Appointment[]
  SessionTransaction SessionTransaction[]
}

model Points {
  id             String       @id @default(uuid())
  points         Int
  couponValue    Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model SessionTransaction {
  id             String            @id @default(uuid())
  number         Int
  price          Float
  date           DateTime
  session        SessionDefinition @relation(fields: [sessionId], references: [id])
  sessionId      String
  user           User              @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
}

model BankDefinition {
  id             String        @id @default(uuid())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  BankRevenue    BankRevenue[]
}

model ExpenseTypeDefinition {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model CompanyDefinition {
  id                       String                     @id @default(uuid())
  name                     String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  organization             Organization               @relation(fields: [organizationId], references: [id])
  organizationId           String
  CompanySessionDefinition CompanySessionDefinition[]
  InsuranceRevenue         InsuranceRevenue[]
}

model CompanySessionDefinition {
  id             String            @id @default(uuid())
  name           String
  price          Int
  company        CompanyDefinition @relation(fields: [companyId], references: [id])
  companyId      String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
}

model SalesDefinition {
  id             String       @id @default(uuid())
  name           String
  price          Int
  cost           Int
  totalQuantity  Int          @default(0)
  level          String
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  Sales          Sales[]
}

model Sales {
  id                String          @id @default(uuid())
  quantity          Int
  totalPrice        Int
  totalCost         Int
  date              DateTime
  level             String
  specialty         Specialty?      @relation(fields: [specialtyId], references: [id])
  specialtyId       String?
  branch            Branch?         @relation(fields: [branchId], references: [id])
  branchId          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  organization      Organization    @relation(fields: [organizationId], references: [id])
  organizationId    String
  user              User?           @relation(fields: [userId], references: [id])
  userId            String?
  salesDefinition   SalesDefinition @relation(fields: [salesDefinitionId], references: [id])
  salesDefinitionId String

}

model CourseDefinition {
  id             String       @id @default(uuid())
  name           String
  type           CourseType
  price          Int
  units          Int
  messureOfUnits String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  Course         Course[]
}

model AppointmentTypeDefinition {
  id             String       @id @default(uuid())
  name           String
  urgent         Boolean
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Course {
  id                 String           @id @default(uuid())
  price              Int
  paid               Int
  consumed           Int              @default(0)
  discount           Int
  startDate          DateTime
  endDate            DateTime
  status             CourseStatus
  sessions           Appointment[]
  patient            Patient          @relation(fields: [patientId], references: [id])
  patientId          String
  user               User             @relation("user", fields: [userId], references: [id])
  userId             String
  courseDefinition   CourseDefinition @relation(fields: [courseDefinitionId], references: [id])
  courseDefinitionId String
  doctor             User             @relation("doctor", fields: [doctorId], references: [id])
  doctorId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  CoursePayment      CoursePayment[]
}

model CoursePayment {
  id          String     @id @default(uuid())
  payment     Int
  date        DateTime
  type        String     @default("Payment")
  user        User       @relation("coursePaymentUser", fields: [userId], references: [id])
  userId      String
  doctor      User?      @relation("coursePaymentDoctor", fields: [doctorId], references: [id])
  doctorId    String?
  specialty   Specialty? @relation(fields: [specialtyId], references: [id])
  specialtyId String?
  branch      Branch?    @relation(fields: [branchId], references: [id])
  branchId    String?
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
}

model ImageCategory {
  id              String            @id @default(uuid())
  name            String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  organization    Organization      @relation(fields: [organizationId], references: [id])
  organizationId  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  ImageDefinition ImageDefinition[]
}

model MedicineDefinition {
  id            String         @id @default(uuid())
  name          String
  concentration String
  form          String
  level         String
  user          User           @relation("medicineUser", fields: [userId], references: [id])
  userId        String
  specialty     Specialty?     @relation(fields: [specialtyId], references: [id])
  specialtyId   String?
  branch        Branch?        @relation(fields: [branchId], references: [id])
  branchId      String?
  doctor        User?          @relation("medicineDoctor", fields: [doctorId], references: [id])
  doctorId      String?
  prescriptions Prescription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model PatientReport {
  id        String   @id @default(uuid())
  name      String
  body      String
  context   String   @default("")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Surgery {
  id             String           @id @default(uuid())
  name           String
  level          String
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  specialty      Specialty?       @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  branch         Branch?          @relation(fields: [branchId], references: [id])
  branchId       String?
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  patientSurgery PatientSurgery[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model PatientSurgery {
  id                   String          @id @default(uuid())
  patient              Patient         @relation(fields: [patientId], references: [id])
  patientId            String
  surgery              Surgery         @relation(fields: [surgeryId], references: [id])
  surgeryId            String
  hospital             Hospital        @relation(fields: [hospitalId], references: [id])
  hospitalId           String
  appointment          Appointment?    @relation(fields: [appointmentId], references: [id])
  appointmentId        String?
  organization         Organization    @relation(fields: [organizationId], references: [id])
  organizationId       String
  date                 DateTime
  fees                 Int?
  hospitalFees         Int?
  anesthesia           AnesthesiaType?
  anesthesiaDoctorName String?
  assistantFees        Int?
  anesthesiaFees       Int?
  others               Int?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
}

// permissions

enum PermissionLevel {
  Organization
  Branch
  Specialty
  User
}

model PermissionRole {
  id             String       @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  permissions    Permission[]
  users          User[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Permission {
  id             String           @id @default(uuid())
  all            Boolean          @default(false)
  role           PermissionRole   @relation(fields: [roleId], references: [id])
  roleId         String
  action         PermissionAction
  level          PermissionLevel
  rules          Rule[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  @@unique([action, roleId], name: "action_roleId_unique_constraint")
}

model Rule {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  permission     Permission?  @relation(fields: [permissionId], references: [id])
  permissionId   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Branch {
  id                 String               @id @default(uuid())
  name               String
  address            String?
  phoneNo            String?
  notes              String?
  organization       Organization         @relation(fields: [organizationId], references: [id])
  organizationId     String
  rules              Rule[]
  specialties        Specialty[]
  userSpecialties    UserSpecialty[]
  Appointment        Appointment[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  InventoryItem      InventoryItem[]
  Price              Price[]
  Hospital           Hospital[]
  Surgery            Surgery[]
  Revenue            Revenue[]
  Expense            Expense[]
  SalesDefinition    SalesDefinition[]
  MedicineDefinition MedicineDefinition[]
  Sales              Sales[]
  BankRevenue        BankRevenue[]
  InsuranceRevenue   InsuranceRevenue[]
  CoursePayment      CoursePayment[]
}

model Specialty {
  id                 String               @id @default(uuid())
  name               String
  organization       Organization         @relation(fields: [organizationId], references: [id])
  organizationId     String
  rules              Rule[]
  branches           Branch[]
  userSpecialties    UserSpecialty[]
  Appointment        Appointment[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  InventoryItem      InventoryItem[]
  Price              Price[]
  Hospital           Hospital[]
  Surgery            Surgery[]
  Revenue            Revenue[]
  Expense            Expense[]
  SalesDefinition    SalesDefinition[]
  MedicineDefinition MedicineDefinition[]
  Sales              Sales[]
  BankRevenue        BankRevenue[]
  InsuranceRevenue   InsuranceRevenue[]
  CoursePayment      CoursePayment[]
}

model UserSpecialty {
  id             String       @id @default(uuid())
  branch         Branch       @relation(fields: [branchId], references: [id])
  branchId       String
  specialty      Specialty    @relation(fields: [specialtyId], references: [id])
  specialtyId    String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@unique([userId, specialtyId, branchId], name: "userId_specialtyId_branchId_unique_constraint")
}

// end permission
