datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentType {
  Examination
  Followup
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Done
}

enum Sex {
  Female
  Male
}

enum Specialty {
  Dentistry
}

enum FieldType {
  Text
  Number
  LongText
}

enum PatientMembershipType {
  Primary
  Secondary
}

model Organization {
  id   String @default(uuid()) @id
  name String
}

model User {
  id             String        @default(uuid()) @id
  name           String
  email          String        @unique
  password       String
  organizationId String
  Appointment    Appointment[]
  View           View[]
  ViewStatus     ViewStatus[]
}

model Patient {
  id           String                @default(uuid()) @id
  name         String
  phoneNo      String                @unique
  type         PatientMembershipType
  appointments Appointment[]
  age          Int
  sex          Sex
}

model Appointment {
  id        String             @default(uuid()) @id
  date      DateTime           @default(now()) @unique
  type      AppointmentType
  patient   Patient            @relation(fields: [patientId], references: [id])
  patientId String
  specialty Specialty
  doctor    User               @relation(fields: [doctorId], references: [id])
  doctorId  String
  labs      String?            @default("[]")
  status    AppointmentStatus
  data      AppointmentField[]
}

model View {
  id                   String       @default(uuid()) @id
  name                 String
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  fieldGroups          FieldGroup[]
  defaultViewsStatuses ViewStatus[] @relation("defaultView")
  activeViewsStatuses  ViewStatus[] @relation("activeView")
}

model ViewStatus {
  id            String @default(uuid()) @id
  user          User   @relation(fields: [userId], references: [id])
  userId        String
  defaultView   View   @relation("defaultView", fields: [defaultViewId], references: [id])
  defaultViewId String
  activeView    View   @relation("activeView", fields: [activeViewId], references: [id])
  activeViewId  String

  @@unique([userId, defaultViewId, activeViewId], name: "userId_defaultViewId_activeViewId_unique_constraint")
}

model FieldGroup {
  id     String  @default(uuid()) @id
  name   String
  order  Int
  view   View    @relation(fields: [viewId], references: [id])
  viewId String
  fields Field[]

  @@unique([order, viewId], name: "order_viewId_unique_constraint")
}

model Field {
  id                String             @default(uuid()) @id
  name              String
  order             Int
  type              FieldType
  required          Boolean
  fieldGroup        FieldGroup?        @relation(fields: [fieldGroupId], references: [id])
  fieldGroupId      String?
  appointmentFields AppointmentField[]

  @@unique([order, fieldGroupId], name: "order_fieldGroupId_unique_constraint")
}

model AppointmentField {
  id            String      @default(uuid()) @id
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String
  value         String

  @@unique([appointmentId, fieldId], name: "appointment_fieldId_unique_constraint")
}