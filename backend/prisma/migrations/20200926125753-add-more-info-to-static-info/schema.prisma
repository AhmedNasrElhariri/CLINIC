datasource postgresql {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentType {
  Examination
  Followup
  Urgent
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Done
}

enum Position {
  Doctor
  Assistant
}

enum Sex {
  Female
  Male
}

enum Specialty {
  Dentistry
}

enum FieldType {
  Text
  Number
  LongText
}

enum PatientMembershipType {
  Primary
  Secondary
}

model Organization {
  id   String @default(uuid()) @id
  name String
}

model User {
  id             String         @default(uuid()) @id
  name           String
  email          String         @unique
  password       String
  organizationId String
  Appointment    Appointment[]
  View           View[]
  ViewStatus     ViewStatus[]
  clinics        Clinic[]       @relation(references: [id])
  WorkingHours   WorkingHours[]
  Snippet        Snippet[]
  permissions    Json           @default("[]")
  avatar         String?
  position       Position
  events         Event[]
}

model Patient {
  id             String                @default(uuid()) @id
  name           String
  phoneNo        String                @unique
  type           PatientMembershipType
  appointments   Appointment[]
  age            Int
  sex            Sex
  organizationId String
  guardianName   String?
  pateintLab     PatientLab[]
  MedicalHistory MedicalHistory[]
  FamilyHistory  FamilyHistory[]
}

model Appointment {
  id        String             @default(uuid()) @id
  date      DateTime           @default(now())
  type      AppointmentType
  patient   Patient            @relation(fields: [patientId], references: [id])
  patientId String
  specialty Specialty
  doctor    User               @relation(fields: [doctorId], references: [id])
  doctorId  String
  labs      String?            @default("[]")
  status    AppointmentStatus
  data      AppointmentField[]
  clinic    Clinic             @relation(fields: [clinicId], references: [id])
  clinicId  String
}

model View {
  id                   String       @default(uuid()) @id
  name                 String
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  fieldGroups          FieldGroup[]
  defaultViewsStatuses ViewStatus[] @relation("defaultView")
  activeViewsStatuses  ViewStatus[] @relation("activeView")
}

model ViewStatus {
  id            String @default(uuid()) @id
  user          User   @relation(fields: [userId], references: [id])
  userId        String
  defaultView   View   @relation("defaultView", fields: [defaultViewId], references: [id])
  defaultViewId String
  activeView    View   @relation("activeView", fields: [activeViewId], references: [id])
  activeViewId  String

  @@unique([userId, defaultViewId, activeViewId], name: "userId_defaultViewId_activeViewId_unique_constraint")
}

model FieldGroup {
  id     String  @default(uuid()) @id
  name   String
  order  Int
  view   View    @relation(fields: [viewId], references: [id])
  viewId String
  fields Field[]

  @@unique([order, viewId], name: "order_viewId_unique_constraint")
}

model Field {
  id                String             @default(uuid()) @id
  name              String
  order             Int
  type              FieldType
  required          Boolean
  fieldGroup        FieldGroup?        @relation(fields: [fieldGroupId], references: [id])
  fieldGroupId      String?
  appointmentFields AppointmentField[]

  @@unique([order, fieldGroupId], name: "order_fieldGroupId_unique_constraint")
}

model AppointmentField {
  id            String      @default(uuid()) @id
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String
  value         String

  @@unique([appointmentId, fieldId], name: "appointment_fieldId_unique_constraint")
}

model File {
  id          String        @default(uuid()) @id
  url         String
  filename    String
  mimetype    String?
  encoding    String?
  Clinic      Clinic[]
  LabDocument LabDocument[]
}

model Clinic {
  id                String  @default(uuid()) @id
  name              String?
  examinationPrice  Int     @default(0)
  followupPrice     Int     @default(0)
  urgentPrice       Int     @default(0)
  duration          Int     @default(5)
  appointmentsCount Int     @default(20)


  // shown in prescription
  doctorName             String? @default("")
  doctorNameAr           String? @default("")
  doctorTitle            String? @default("")
  doctorTitleAr          String? @default("")
  doctorJobDescription   String? @default("")
  doctorJobDescriptionAr String? @default("")
  phoneNo                String? @default("")
  phoneNo1               String? @default("")
  address                String? @default("")
  address1               String? @default("")

  logo           File?         @relation(fields: [logoId], references: [id])
  logoId         String?
  users          User[]        @relation(references: [id])
  organizationId String
  Expense        Expense[]
  Revenue        Revenue[]
  Appointment    Appointment[]
}

model Week {
  id     String @default(uuid()) @id
  weekNo Int
  year   Int

  @@unique([weekNo, year], name: "week_year_unique_constraint")
  WorkingHours WorkingHours[]
}

model WorkingHours {
  id       String   @default(uuid()) @id
  week     Week     @relation(fields: [weekId], references: [id])
  weekId   String
  doctor   User     @relation(fields: [doctorId], references: [id])
  doctorId String
  start    DateTime
  end      DateTime
}

model Snippet {
  id     String @default(uuid()) @id
  user   User   @relation(fields: [userId], references: [id])
  userId String
  title  String @unique
  body   String
}

model PatientLab {
  id        String        @default(uuid()) @id
  patient   Patient       @relation(fields: [patientId], references: [id])
  patientId String
  name      String
  documents LabDocument[]
  @@unique([name, patientId], name: "name_patientId_unique_constraint")
}

model LabDocument {
  id           String     @default(uuid()) @id
  file         File       @relation(fields: [fileId], references: [id])
  fileId       String
  patientLab   PatientLab @relation(fields: [patientLabId], references: [id])
  patientLabId String
}

model MedicalHistory {
  id           String    @default(uuid()) @id
  medicineName String
  frequency    String?
  dose         String?
  fromDate     DateTime?
  patient      Patient   @relation(fields: [patientId], references: [id])
  patientId    String
}

model FamilyHistory {
  id        String  @default(uuid()) @id
  disease   String
  relative  String
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

model Expense {
  id        String   @default(uuid()) @id
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  clinicId  String
}

model Revenue {
  id        String   @default(uuid()) @id
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  clinic    Clinic   @relation(fields: [clinicId], references: [id])
  clinicId  String
}

model Notification {
  id         String   @default(uuid()) @id
  notifierId String
  userId     String
  type       String
  message    String
  viewed     Boolean  @default(false)
  date       DateTime @default(now())
}

model Event {
  id     String   @default(uuid()) @id
  user   User     @relation(fields: [userId], references: [id])
  userId String
  name   String
  start  DateTime
  end    DateTime
}
