datasource postgresql {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentType {
  Examination
  Followup
  Urgent
  Session
  Surgery
}

enum LabStatus {
  Draft
  Pending
  Completed
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
}

enum Position {
  Admin
  Doctor
  Assistant
}

enum Sex {
  Female
  Male
}

enum FieldType {
  Text
  Number
  LongText
  Radio
  Check
  NestedSelector
}

enum PatientMembershipType {
  Primary
  Secondary
}

enum UnitOfMeaure {
  PerUnit
  Milligram
  Kilogram
  Millimeter
  Centimetre
  Tablet
  Stripe
}

enum InventoryOperation {
  Add
  Substract
}

enum PermissionAction {
  List_Appointment
  Create_Appointment
  Reschedule_Appointment
  Finish_Appointment
  Cancel_Appointment
  Archive_Appointment
  View_Patient
  View_Accounting
  AddRevenue_Accounting
  AddExpense_Accounting
  EditRevenue_Accounting
  EditExpense_Accounting
  Print_Accounting
  View_Calendar
  CreateEvent_Calendar
  View_Inventory
  AddItem_Inventory
  ViewHistory_Inventory
  DefineItem_Inventory
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

model Organization {
  id               String             @id @default(uuid())
  name             String
  invoiceCounter   Int                @default(1)
  item             Item[]
  hospital         Hospital[]
  surgeries        Surgery[]
  patientSurgeries PatientSurgery[]
  roles            PermissionRole[]
  permissions      Permission[]
  rules            Rule[]
  branches         Branch[]
  specialties      Specialty[]
  users            User[]
  userSpecialties  UserSpecialty[]
  patients         Patient[]
  inventoryItems   InventoryItem[]
  inventoryHistory InventoryHistory[]
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  organization        Organization         @relation(fields: [organizationId], references: [id])
  organizationId      String
  permissions         Json                 @default("[]")
  avatar              String?
  role                PermissionRole?      @relation(fields: [roleId], references: [id])
  roleId              String?
  appointments        Appointment[]
  views               View[]
  viewStatus          ViewStatus[]
  workingHours        WorkingHours[]
  snippets            Snippet[]
  position            Position
  events              Event[]
  inventoryHistory    InventoryHistory[]
  rules               Rule[]
  specialties         UserSpecialty[]
  labDefinitions      LabDefinition[]
  imageDefinitions    ImageDefinition[]
  medicineDefinitions MedicineDefinition[]
  patientReports      PatientReport[]
  patients            Patient[]
  expenses            Expense[]
  revenues            Revenue[]
  configurations      Configuration?
  inventoryItem       InventoryItem[]
  item                Item[]
  timing              Timing[]
  labCategories       LabCategory[]
  imageCategories     ImageCategory[]
}

model Patient {
  id               String                @id @default(uuid())
  name             String
  phoneNo          String                @unique
  type             PatientMembershipType
  appointments     Appointment[]
  age              Int
  sex              Sex
  organization     Organization          @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User                  @relation(fields: [userId], references: [id])
  userId           String
  guardianName     String?
  medicineHistory  MedicineHistory[]
  familyHistory    FamilyHistory[]
  inventoryHistory InventoryHistory[]
  patientSurgeries PatientSurgery[]
  labs             Lab[]
  images           Image[]
}

model Appointment {
  id               String             @id @default(uuid())
  date             DateTime           @default(now())
  type             AppointmentType
  patient          Patient            @relation(fields: [patientId], references: [id])
  patientId        String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  status           AppointmentStatus
  data             AppointmentField[]
  notes            String?            @default("")
  patientSurgeries PatientSurgery[]
  appointmentLabId String?
  prescription     Prescription[]
  labs             Lab[]
  images           Image[]
  pictures         AppointmentFile[]
}

model Prescription {
  id            String             @id @default(uuid())
  dose          String?
  medicine      MedicineDefinition @relation(fields: [medicineId], references: [id])
  medicineId    String
  timing        Timing             @relation(fields: [timingId], references: [id])
  timingId      String
  duration      Int?
  period        String?
  appointment   Appointment?       @relation(fields: [appointmentId], references: [id])
  appointmentId String?
}

model View {
  id                  String          @id @default(uuid())
  name                String
  type                AppointmentType @default(Examination)
  user                User            @relation(fields: [userId], references: [id])
  userId              String
  fieldGroups         FieldGroup[]
  activeViewsStatuses ViewStatus[]
}

model ViewStatus {
  id           String @id @default(uuid())
  user         User   @relation(fields: [userId], references: [id])
  userId       String
  activeView   View   @relation(fields: [activeViewId], references: [id])
  activeViewId String
}

model FieldGroup {
  id     String  @id @default(uuid())
  name   String
  order  Int
  view   View    @relation(fields: [viewId], references: [id])
  viewId String
  fields Field[]

  @@unique([order, viewId], name: "order_viewId_unique_constraint")
}

model Field {
  id                String             @id @default(uuid())
  name              String
  order             Int
  type              FieldType
  choices           Json
  fieldGroup        FieldGroup?        @relation(fields: [fieldGroupId], references: [id])
  fieldGroupId      String?
  appointmentFields AppointmentField[]

  @@unique([order, fieldGroupId], name: "order_fieldGroupId_unique_constraint")
}

model AppointmentField {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  field         Field       @relation(fields: [fieldId], references: [id])
  fieldId       String
  value         String

  @@unique([appointmentId, fieldId], name: "appointment_fieldId_unique_constraint")
}

model File {
  id               String            @id @default(uuid())
  url              String
  filename         String
  mimetype         String?
  encoding         String?
  lab              Lab[]
  image            Image[]
  appointmentFiles AppointmentFile[]
}

model AppointmentFile {
  comment       String?
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
  file          File        @relation(fields: [fileId], references: [id])
  fileId        String

  @@id(fileId)
}

model Configuration {
  id                   String  @id @default(uuid())
  user                 User    @relation(fields: [userId], references: [id])
  userId               String
  enableInvoiceCounter Boolean @default(false)
  sessions             Json    @default("[]")


  @@unique([userId], name: "userid_unique_constraint")
}

model Week {
  id     String @id @default(uuid())
  weekNo Int
  year   Int

  WorkingHours WorkingHours[]
  @@unique([weekNo, year], name: "week_year_unique_constraint")
}

model WorkingHours {
  id       String   @id @default(uuid())
  week     Week     @relation(fields: [weekId], references: [id])
  weekId   String
  doctor   User     @relation(fields: [doctorId], references: [id])
  doctorId String
  start    DateTime
  end      DateTime
}

model Snippet {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  title  String @unique
  body   String
}

model Lab {
  id              String        @id @default(uuid())
  status          LabStatus
  requiredDate    DateTime      @default(now())
  resultDate      DateTime?
  value           String?
  patient         Patient       @relation(fields: [patientId], references: [id])
  patientId       String
  labDefinition   LabDefinition @relation(fields: [labDefinitionId], references: [id])
  labDefinitionId String
  appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId   String
  documents       File[]
}

model Image {
  id                String          @id @default(uuid())
  status            LabStatus
  requiredDate      DateTime        @default(now())
  resultDate        DateTime?
  value             String?
  patient           Patient         @relation(fields: [patientId], references: [id])
  patientId         String
  imageDefinition   ImageDefinition @relation(fields: [imageDefinitionId], references: [id])
  imageDefinitionId String
  appointment       Appointment     @relation(fields: [appointmentId], references: [id])
  appointmentId     String
  documents         File[]
}

model MedicineHistory {
  id           String    @id @default(uuid())
  medicineName String
  frequency    String?
  dose         String?
  fromDate     DateTime?
  patient      Patient   @relation(fields: [patientId], references: [id])
  patientId    String
}

model FamilyHistory {
  id        String  @id @default(uuid())
  disease   String
  relative  String
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

model Expense {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Revenue {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  amount    Int
  invoiceNo String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Notification {
  id         String   @id @default(uuid())
  notifierId String
  userId     String
  type       String
  message    String
  viewed     Boolean  @default(false)
  date       DateTime @default(now())
}

model Event {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  name   String
  start  DateTime
  end    DateTime
}

model Item {
  id               String             @id @default(uuid())
  name             String             @unique
  unitOfMeasure    UnitOfMeaure
  quantity         Int
  barcode          String?
  notes            String?
  organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  inventoryItems   InventoryItem[]
  inventoryHistory InventoryHistory[]
}

model InventoryItem {
  quantity       Int
  item           Item         @relation(fields: [itemId], references: [id])
  itemId         String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  userId         String

  @@id([itemId, userId])
}

model InventoryHistory {
  id             String             @id @default(uuid())
  item           Item               @relation(fields: [itemId], references: [id])
  itemId         String
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  patient        Patient?           @relation(fields: [patientId], references: [id])
  patientId      String?
  operation      InventoryOperation
  quantity       Int
  price          Int?
  date           DateTime
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Hospital {
  id             String           @id @default(uuid())
  name           String
  phoneNo        String?
  address        String?
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  PatientSurgery PatientSurgery[]
}

model LabDefinition {
  id       String @id @default(uuid())
  name     String
  category String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  labs     Lab[]
}

model LabCategory {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Timing {
  id                String         @id @default(uuid())
  name              String
  englishPrintValue String
  arabicPrintValue  String
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  prescriptions     Prescription[]
}

model ImageDefinition {
  id       String  @id @default(uuid())
  name     String
  category String
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  Image    Image[]
}

model ImageCategory {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model MedicineDefinition {
  id            String         @id @default(uuid())
  name          String
  concentration String
  form          String
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  prescriptions Prescription[]
}

model PatientReport {
  id     String @id @default(uuid())
  name   String
  body   String
  user   User   @relation(fields: [userId], references: [id])
  userId String

}

model Surgery {
  id             String           @id @default(uuid())
  name           String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  patientSurgery PatientSurgery[]
}

model PatientSurgery {
  id             String       @id @default(uuid())
  patient        Patient      @relation(fields: [patientId], references: [id])
  patientId      String
  surgery        Surgery      @relation(fields: [surgeryId], references: [id])
  surgeryId      String
  hospital       Hospital     @relation(fields: [hospitalId], references: [id])
  hospitalId     String
  appointment    Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId  String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  date           DateTime
  fees           Int?
  hospitalFees   Int?
}

// permissions

enum PermissionLevel {
  Organization
  Branch
  Specialty
  User
}

model PermissionRole {
  id             String       @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  permissions    Permission[]
  users          User[]
}

model Permission {
  id             String           @id @default(uuid())
  all            Boolean          @default(false)
  role           PermissionRole   @relation(fields: [roleId], references: [id])
  roleId         String
  action         PermissionAction
  level          PermissionLevel
  rules          Rule[]
  organization   Organization     @relation(fields: [organizationId], references: [id])
  organizationId String

  @@unique([action, roleId], name: "action_roleId_unique_constraint")
}

model Rule {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  branch         Branch?      @relation(fields: [branchId], references: [id])
  branchId       String?
  specialty      Specialty?   @relation(fields: [specialtyId], references: [id])
  specialtyId    String?
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  permission     Permission   @relation(fields: [permissionId], references: [id])
  permissionId   String
}

model Branch {
  id              String          @id @default(uuid())
  name            String
  address         String?
  phoneNo         String?
  notes           String?
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  String
  rules           Rule[]
  specialties     Specialty[]
  userSpecialties UserSpecialty[]
}

model Specialty {
  id              String          @id @default(uuid())
  name            String
  organization    Organization    @relation(fields: [organizationId], references: [id])
  organizationId  String
  rules           Rule[]
  branches        Branch[]
  userSpecialties UserSpecialty[]
}

model UserSpecialty {
  id             String       @id @default(uuid())
  branch         Branch       @relation(fields: [branchId], references: [id])
  branchId       String
  specialty      Specialty    @relation(fields: [specialtyId], references: [id])
  specialtyId    String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@unique([userId, branchId], name: "userId_branchId_unique_constraint")
}

// end permission
