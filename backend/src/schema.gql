scalar Date
scalar VitalData
scalar JSON
scalar Upload

enum PermissionLevel {
  Organization
  Branch
  Specialty
  User
}

enum Position {
  Admin
  Doctor
  Assistant
}

enum PatientMembershipType {
  Primary
  Secondary
}

enum AppointmentType {
  Examination
  Followup
  Urgent
  Session
  Surgery
}

enum Sex {
  Female
  Male
}

enum FieldType {
  Text
  Number
  LongText
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Done
  Closed
}

enum UnitOfMeaure {
  PerUnit
  Milligram
  Kilogram
  Millimeter
  Centimetre
  Tablet
  Stripe
}

########################### Query ##################################

type Query {
  hello(name: String): String!
  patients: [Patient!]
  clinicPatients(clinicId: ID!): [Patient!]
  appointments(input: AppointmentQueryInput): [Appointment!]
  appointment(id: ID!): Appointment
  appointmentHistory(appointmentId: ID, patientId: ID): [Appointment!]
  patient(id: ID!): Patient
  listMyViews: [View!]
  activeViews: [View!]
  listMyViewsStatus: [ViewStatus!]
  myClinics: [Clinic!]
  mySnippets: [Snippet!]
  patientLabs(patientId: ID!): [PatientLab!]
  medicineHistory(patientId: ID!): [MedicineHistory!]
  familyHistory(patientId: ID!): [FamilyHistory!]
  expenses(clinicId: ID!): [Expense!]
  revenues(clinicId: ID!): [Revenue!]
  search(q: String!, patient: Boolean, snippet: Boolean): SearchResult
  clinicUsers(clinicId: ID!): [User!]
  user(id: ID!): User
  myNotifications: [Notification!]
  myEvents: [Event!]
  items: [Item!]
  inventory(clinicId: ID!): [InventoryItem!]
  inventoryHistory(clinicId: ID!): [InventoryHistory!]
  myHospitals: [Hospital!]
  mySurgeries: [Surgery!]
  patientSurgeries(patientId: ID): [PatientSurgery!]
  myPatientSurgeries: [PatientSurgery!]
  myTestsDefinition: [TestDefinition!]
  myImagesDefinition: [ImageDefinition!]
  myMedicinesDefinition: [MedicineDefinition!]
  myPatientReports: [PatientReport!]
  getActions: [Action!]
  listBranches: [Branch!]
  listSpecialties: [Specialty!]
  listUsers: [User!]
}

########################### Mutation ##################################

type Mutation {
  createPatient(input: PatientInput!): Patient!
  editPatient(patient: PatientInput!): Patient!
  createAppointment(input: AppointmentInput!): Appointment!
  updateAppointment(appointment: UpdateAppointmentInput!): Appointment!
  archiveAppointment(id: ID!): Appointment!
  setAppointmentDone(
    id: ID!
    sessions: [SessionInput!]
    items: [FinishAppointmentItemInput!]
    discount: Int
  ): Appointment!
  createView(view: ViewInput!): Boolean
  editView(groups: [FieldGroupInput!]): Boolean
  login(email: String!, password: String!): AuthPayload
  verify(token: String): User
  changePassword(currentPassword: String!, newPassword: String!): AuthPayload
  activateView(viewId: ID!): ViewStatus!
  createDefaultView: Boolean
  adjustAppointment(id: ID!, date: Date!): Appointment!
  cancelAppointment(id: ID!): Appointment!
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
  updateClinic(clinic: ClinicInput!): Clinic
  createSnippet(snippet: SnippetInput!): Snippet!
  addLabDocs(patientLab: PatientLabInput!): PatientLab!
  createMedicineHistory(
    medicineHistory: MedicineHistoryInput!
  ): MedicineHistory!
  createFamilyHistory(familyHistory: FamilyHistoryInput!): FamilyHistory!
  createExpense(expense: ExpenseInput!): Expense
  createRevenue(revenue: RevenueInput!): Revenue
  updateExpense(expense: ExpenseUpdateInput!): Expense
  updateRevenue(revenue: RevenueUpdateInput!): Revenue
  setAvatar(url: String!): Boolean
  updateUserPermissions(userId: ID!, permissions: [PermissionInput!]!): Boolean
  clearNotifications: Boolean
  createEvent(event: EventInput!): Event
  defineItem(item: ItemInput!): Item
  removeItemDefinition(id: ID!): Item
  editItem(item: ItemUpdateInput!): Item
  addItem(item: AddToInventoryInput!, clinicId: ID!): InventoryItem
  removeItem(itemId: ID!, clinicId: ID!): InventoryItem
  addHospital(hospital: HospitalInput!): Hospital
  editHospital(hospital: HospitalInput!): Hospital
  defineSurgery(surgery: SurgeryInput!): Surgery
  editSurgery(surgery: SurgeryInput!): Surgery
  createPatientSurgery(
    clinicId: ID!
    patientSurgery: PatientSurgeryInput!
  ): PatientSurgery
  addTestDefinition(testDefinition: TestInputDefinition!): TestDefinition
  editTestDefinition(testDefinition: TestInputDefinition!): TestDefinition
  addImageDefinition(imageDefinition: ImageInputDefinition!): ImageDefinition
  editImageDefinition(imageDefinition: ImageInputDefinition!): ImageDefinition
  addMedicineDefinition(
    medicineDefinition: MedicineInputDefinition!
  ): MedicineDefinition
  editMedicineDefinition(
    medicineDefinition: MedicineInputDefinition!
  ): MedicineDefinition
  addPatientReport(patientReport: PatientReportInput!): PatientReport
  editPatientReport(patientReport: PatientReportInput!): PatientReport
  createPatientSurgery(patientSurgery: PatientSurgeryInput!): PatientSurgery
  createRole(role: RoleInput!): Role!
  createBranch(branch: BranchInput!): Branch!
  createSpecialty(specialty: SpecialtyInput!): Specialty!
  createUser(user: UserInput!): User!
  addSpecialty(branchId: ID!, specialtyId: ID!): Branch!
  addDoctor(branchId: ID!, specialtyId: ID!, userId: ID!): Branch!
}

########################### Auth ##################################

type AuthPayload {
  token: String
  user: User
}

input UserLoginInput {
  email: String!
  password: String!
}

########################### User ##################################

type User {
  id: ID!
  name: String!
  email: String!
  position: Position
  permissions: [Permission!]
  avatar: String
  specialty: Specialty
}

type Permission {
  action: String
  subject: String
}

type Role {
  id: ID!
  name: String!
}

type Branch {
  id: ID!
  name: String!
  address: String
  phoneNo: String
  notes: String
  specialties: [Specialty!]
}

type Specialty {
  id: ID!
  name: String!
  branches: [Branch!]
  doctors: [User!]
}

type Action {
  id: ID!
  name: String!
  subject: String!
}

input RoleInput {
  name: String!
  permissions: [PermissionInput!]!
}

input PermissionInput {
  actionId: ID!
  all: Boolean
  level: PermissionLevel!
  rules: [PermissionRuleInput!]
}

input PermissionRuleInput {
  organizationId: ID
  branchId: ID
  specialtyId: ID
  userId: ID
}

input BranchInput {
  id: ID
  name: String!
  address: String
  phoneNo: String
  notes: String
}

input SpecialtyInput {
  id: ID
  name: String!
}

input UserInput {
  specialtyId: ID
  name: String!
  email: String!
  password: String!
  position: Position!
}

########################### Search ##################################

interface Searchable {
  searchName: String!
}

type SearchResult {
  patients: [Patient!]
  snippets: [Snippet!]
}

########################### Patient ##################################

type Patient implements Searchable {
  id: ID!
  type: PatientMembershipType!
  name: String!
  searchName: String!
  phoneNo: String!
  age: Int!
  sex: Sex!
  appointments: [Appointment!]
}

input PatientInput {
  id: ID
  name: String!
  phoneNo: String!
  age: Int!
  sex: Sex!
  type: PatientMembershipType!
  guardianName: String
}

########################### Appointment ##################################

type Appointment {
  id: ID!
  date: Date
  type: AppointmentType!
  status: AppointmentStatus!
  labs: JSON
  patient: Patient!
  data: [AppointmentField!]
  notes: String
  prescription: String
  clinic: Clinic
  collections: [Collection!]
}

type Collection {
  id: ID!
  caption: String
  images: [File!]
}

type AppointmentField {
  id: ID!
  value: JSON
  field: Field!
}

input AppointmentInput {
  patient: ID!
  date: Date!
  type: AppointmentType!
  clinicId: ID!
  labs: JSON
  notes: String
}

input CollectionInput {
  id: ID
  caption: String
  images: [FileInput!]
}

input UpdateAppointmentInput {
  id: ID!
  labs: JSON
  data: [AppointmentFieldInput!]
  notes: String
  prescription: String
  collections: [CollectionInput!]
}

input AppointmentQueryInput {
  clinicIds: [ID!]!
  patients: [ID]
  fromDate: Date
  toDate: Date
  type: AppointmentType
}

input AppointmentFieldInput {
  id: ID
  value: JSON
  fieldId: ID!
}

########################### views ##################################

type View {
  id: ID!
  name: String
  type: AppointmentType
  default: Boolean
  user: User
  userId: String
  fieldGroups: [FieldGroup!]
}

type FieldGroup {
  id: ID!
  name: String!
  order: Int!
  fields: [Field!]
}

type Field {
  id: ID!
  name: String!
  order: Int!
  type: FieldType!
  required: Boolean!
}

type ViewStatus {
  id: ID!
  user: User
  userId: String
  defaultView: View
  defaultViewId: String
  activeView: View
  activeViewId: String
}

input ViewInput {
  id: ID
  name: String!
  type: AppointmentType!
  fieldGroups: [FieldGroupInput!]
}

input FieldGroupInput {
  id: ID
  name: String!
  order: Int!
  fields: [FieldInput!]
}

input FieldInput {
  id: ID
  name: String!
  order: Int!
  type: FieldType!
  required: Boolean!
}

########################### File ##################################

type Clinic {
  id: ID

  doctorName: String
  doctorNameAr: String
  doctorTitle: String
  doctorTitleAr: String
  doctorJobDescription: String
  doctorJobDescriptionAr: String
  phoneNo: String
  phoneNo1: String
  address: String
  address1: String

  name: String!
  examinationPrice: Int
  followupPrice: Int
  urgentPrice: Int
  duration: Int
  appointmentsCount: Int

  logo: File

  sessions: [Session]
}

input ClinicInput {
  id: ID

  doctorName: String
  doctorNameAr: String
  doctorTitle: String
  doctorTitleAr: String
  doctorJobDescription: String
  doctorJobDescriptionAr: String
  phoneNo: String
  phoneNo1: String
  address: String
  address1: String
  logoId: ID

  examinationPrice: Int
  followupPrice: Int
  urgentPrice: Int
  duration: Int
  appointmentsCount: Int

  sessions: [SessionInput!]
}

type File {
  id: ID!
  filename: String!
  mimetype: String
  encoding: String
  comment: String
  url: String
}

type Session {
  name: String!
  price: Int!
}

input SessionInput {
  name: String!
  price: Int!
}

input FileInput {
  id: ID!
  comment: String
}

########################### Snippet ##################################

type Snippet implements Searchable {
  id: ID!
  title: String!
  searchName: String!
  body: String!
}

input SnippetInput {
  title: String!
  body: String!
}

########################### Labs ##################################

type PatientLab {
  id: ID
  patient: Patient
  name: String
  documents: [LabDocument!]
}

type LabDocument {
  id: ID
  file: File
}

input PatientLabInput {
  patientId: ID!
  name: String!
  documents: [ID!]
}

########################### History ##################################

type MedicineHistory {
  id: ID!
  medicineName: String!
  frequency: String
  dose: String
  fromDate: Date
}

type FamilyHistory {
  id: ID!
  disease: String!
  relative: String!
}

input MedicineHistoryInput {
  medicineName: String!
  frequency: String
  dose: String
  fromDate: Date
  patientId: ID!
}

input FamilyHistoryInput {
  disease: String!
  relative: String!
  patientId: ID!
}

########################### Expense ##################################

type Expense {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
}

input ExpenseInput {
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
  clinicId: ID!
}

input ExpenseUpdateInput {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
}

########################### Revenue ##################################

type Revenue {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
}

input RevenueInput {
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
  clinicId: ID!
}

input RevenueUpdateInput {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
}

########################### Notification ##################################

type Subscription {
  notifications: Notification!
}

type Notification {
  message: String!
  viewed: Boolean!
  date: Date
}

########################### Event ##################################

type Event {
  id: ID!
  name: String!
  start: Date!
  end: Date!
}

input EventInput {
  name: String!
  start: Date!
  end: Date!
}

########################### Inventory ##################################

type Item {
  id: ID!
  name: String!
  unitOfMeasure: UnitOfMeaure
  quantity: Int!
  barcode: String
  notes: String
}

type InventoryItem {
  itemId: ID!
  clinicId: ID!
  quantity: Int!
}

type InventoryHistory {
  body: String!
  date: Date!
}

input ItemInput {
  id: ID
  name: String!
  unitOfMeasure: UnitOfMeaure
  quantity: Int!
  barcode: String
  notes: String
}

input ItemUpdateInput {
  id: ID!
  name: String!
}

input AddToInventoryInput {
  itemId: ID!
  amount: Int!
  price: Int!
}

input FinishAppointmentItemInput {
  itemId: String!
  quantity: Int!
}

########################### Hospitals ##################################

type Hospital {
  id: ID!
  name: String!
  phoneNo: String
  address: Date
}

input HospitalInput {
  id: ID
  name: String!
  phoneNo: String
  address: Date
}

########################### Surgeries ##################################

type Surgery {
  id: ID!
  name: String!
}

input SurgeryInput {
  id: ID
  name: String!
}
########################### Tests Definition ##################################

type TestDefinition {
  id: ID!
  testName: String!
}

input TestInputDefinition {
  id: ID
  testName: String!
}

########################### Images Definition ##################################

type ImageDefinition {
  id: ID!
  imageName: String!
}

input ImageInputDefinition {
  id: ID
  imageName: String!
}

########################### Medicine Definition ##################################

type MedicineDefinition {
  id: ID!
  medicineName: String!
  concentration: String!
  medicineForm: String
}

input MedicineInputDefinition {
  id: ID
  medicineName: String!
  concentration: String!
  medicineForm: String
}

########################### Patient Report ##################################

type PatientReport {
  id: ID!
  name: String!
  body: String!
}

input PatientReportInput {
  id: ID
  name: String!
  body: String!
}

########################### Patient Surgeries ##################################

type PatientSurgery {
  id: ID!
  patient: Patient
  surgery: Surgery
  hospital: Hospital
  date: Date
  fees: Int
  hospitalFees: Int
  appointment: Appointment
}

input PatientSurgeryInput {
  patientId: ID!
  surgeryId: ID!
  hospitalId: ID!
  date: Date
  fees: Int
  hospitalFees: Int
}
