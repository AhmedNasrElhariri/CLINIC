scalar Date
scalar VitalData
scalar JSON
scalar Upload

enum PermissionLevel {
  Organization
  Branch
  Specialty
  User
}

enum CourseStatus {
  InProgress
  Finished
  EarlyFinished
}

enum LabStatus {
  Draft
  Pending
  Completed
}

enum Position {
  Admin
  Doctor
  Assistant
}

enum PayrollTransactionType {
  Commision
  Advance
  Incentive
  Deduction
  Salary
}

enum PatientMembershipType {
  Primary
  Secondary
}

enum AppointmentType {
  Examination
  Followup
  Course
  Urgent
  Session
  Surgery
}

enum Sex {
  Female
  Male
}

enum PayrollStatus {
  Open
  Close
}

enum FieldType {
  Text
  Number
  LongText
  Radio
  Check
  NestedSelector
}

enum AppointmentStatus {
  Scheduled
  Cancelled
  Missed
  Changed
  Archived
  Waiting
}

enum UnitOfMeaure {
  PerUnit
  Milligram
  Kilogram
  Millimeter
  Centimetre
  Tablet
  Stripe
}

########################### Query ##################################

type Query {
  hello(name: String): Boolean
  patients(offset: Int, limit: Int): PatientData
  appointments(
    input: AppointmentQueryInput
    offset: Int
    limit: Int
  ): AppointmentData!
  appointment(id: ID!): Appointment
  patientAppointments(patientId: ID!): [Appointment!]
  appointmentHistory(appointmentId: ID, patientId: ID): [Appointment!]
  patient(id: ID!): Patient
  listMyViews: [View!]
  activeViews: [View!]
  listMyViewsStatus: [ViewStatus!]
  mySnippets: [Snippet!]
  medicineHistory(patientId: ID!): [MedicineHistory!]
  familyHistory(patientId: ID!): [FamilyHistory!]
  expenses: [Expense!]
  revenues: [Revenue!]
  bankRevenues: [BankRevenue!]
  companyRevenues: [InsuranceRevenue!]
  search(q: String!, patient: Boolean, snippet: Boolean): SearchResult
  user(id: ID!): User
  myNotifications: [Notification!]
  myEvents: [Event!]
  items: [Item!]
  inventory: [InventoryItem!]
  inventoryHistory: [InventoryHistory!]
  myHospitals: [Hospital!]
  mySurgeries: [Surgery!]
  patientSurgeries(patientId: ID): [PatientSurgery!]
  myPatientSurgeries: [PatientSurgery!]
  myLabsDefinitions(categoryId: ID): [LabDefinition!]
  myLabsCategory: [LabCategory!]
  myTimings: [Timing!]
  myImagesDefinition(categoryId: ID): [ImageDefinition!]
  mySessionsDefinition: [SessionDefinition!]
  myPrices: [Price!]
  myBanksDefinition: [BankDefinition!]
  myExpenseTypesDefinition: [ExpenseTypeDefinition!]
  myCompanysDefinition: [CompanyDefinition!]
  myCompanysSessionDefinition: [CompanySessionDefinition!]
  mySalesesDefinition: [SalesDefinition!]
  mySaleses: [Sales!]
  myCoursesDefinition: [CourseDefinition!]
  myCourses(patientId: ID): [Course!]
  myDoctors(appointmentId: ID): [User!]
  myImagesCategory: [ImageCategory!]
  myMedicinesDefinition: [MedicineDefinition!]
  myPatientReports: [PatientReport!]
  getActions: [String!]
  getPulseControl: PulseControl
  listBranches: [Branch!]
  listSpecialties: [Specialty!]
  listUsers: [User!]
  listRoles: [Role!]
  listBranchesTree(action: String!): [Branch!]
  organizationBranches: [Branch!]
  listActionUsers(action: String!): [User!]
  listActionDoctors(action: String!): [User!]
  configuration: Configuration
  myInvoiceCounter: Organization!
  patientImageDocs(status: String!, patientId: String!): [Image!]
  patientLabs(patientId: ID!): [Lab!]
  patientImages(patientId: ID!): [Image!]
  payrollUsers: [PayrollUser!]
  payslips: [Payslips!]
  userTransactions(userId: ID!): [PayrollTransaction!]
  userCoursePayment(userId: ID!, period: [String!]): [CoursePayment!]
  appointmentsDayCount(date: Date!): AppointmentsDayCount!
  coursePayments(courseId: ID!): [CoursePayment!]
  transactionCoursesTimeFrame(userId: ID!): TransctionCoursesTimeFrame
  transactionRevenuesTimeFrame(userId: ID!): TransctionRevenuesTimeFrame
  areas: [Area]
}

########################### Mutation ##################################

type Mutation {
  createPatient(input: PatientInput!): Patient!
  editPatient(patient: PatientInput!): Patient!
  createAppointment(appointment: AppointmentInput!): Appointment!
  updateAppointment(appointment: UpdateAppointmentInput!): Appointment!
  completeAppointment(id: ID!): Appointment!
  archiveAppointment(
    id: ID!
    sessions: [SessionInput!]
    items: [FinishAppointmentItemInput!]
    discount: Discount
    patientName: String!
    others: Others
    bank: ID
    company: ID
    option: optionInput!
  ): Appointment!
  createView(view: ViewInput!): Boolean
  editView(groups: [FieldGroupInput!]): Boolean
  login(email: String!, password: String!): AuthPayload
  verify(token: String): User
  changePassword(currentPassword: String!, newPassword: String!): AuthPayload
  activateView(viewId: ID!): ViewStatus!
  createDefaultView: Boolean
  adjustAppointment(id: ID!, date: Date!): Appointment!
  cancelAppointment(id: ID!): Appointment!
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
  createSnippet(snippet: SnippetInput!): Snippet!
  insertLabResult(lab: LabInput!): Lab!
  insertImageResult(image: ImageInput!): Image!
  createMedicineHistory(
    medicineHistory: MedicineHistoryInput!
  ): MedicineHistory!
  createFamilyHistory(familyHistory: FamilyHistoryInput!): FamilyHistory!
  createExpense(expense: ExpenseInput!): Expense
  createRevenue(revenue: RevenueInput!): Revenue
  updateExpense(expense: ExpenseUpdateInput!): Expense
  updateRevenue(revenue: RevenueUpdateInput!): Revenue
  setAvatar(url: String!): Boolean
  updateUserPermissions(userId: ID!, permissions: [PermissionInput!]!): Boolean
  clearNotifications: Boolean
  createEvent(event: EventInput!): Event
  defineItem(item: ItemInput!): Item
  removeItemDefinition(id: ID!): Item
  editItem(item: ItemUpdateInput!): Item
  addItem(item: AddToInventoryInput!): InventoryItem
  removeItem(itemId: ID!): InventoryItem
  addHospital(hospital: HospitalInput!): Hospital
  editHospital(hospital: HospitalInput!): Hospital
  defineSurgery(surgery: SurgeryInput!): Surgery
  editSurgery(surgery: SurgeryInput!): Surgery
  createPatientSurgery(patientSurgery: PatientSurgeryInput!): PatientSurgery
  addLabDefinition(labDefinition: LabInputDefinition!): LabDefinition
  editLabDefinition(labDefinition: LabInputDefinition!): LabDefinition
  addLabCategory(labCategory: LabCategoryInput!): LabCategory
  editLabCategory(labCategory: LabCategoryInput!): LabCategory
  addTiming(timing: TimingInput!): Timing
  editTiming(timing: TimingInput!): Timing
  addImageDefinition(imageDefinition: ImageInputDefinition!): ImageDefinition
  editImageDefinition(imageDefinition: ImageInputDefinition!): ImageDefinition
  addSessionDefinition(
    sessionDefinition: SessionInputDefinition!
  ): SessionDefinition
  editSessionDefinition(
    sessionDefinition: SessionInputDefinition!
  ): SessionDefinition
  addPrice(price: PriceInput!): Price
  addPulsesControl(pulsesControl: PulseControlInput!): PulseControl!
  editPrice(price: PriceInput!): Price
  addBankDefinition(bankDefinition: BankInputDefinition!): BankDefinition
  editBankDefinition(bankDefinition: BankInputDefinition!): BankDefinition
  addExpenseTypeDefinition(
    expenseTypeDefinition: ExpenseTypeInputDefinition!
  ): ExpenseTypeDefinition
  editExpenseTypeDefinition(
    expenseTypeDefinition: ExpenseTypeInputDefinition!
  ): ExpenseTypeDefinition
  addCompanyDefinition(
    companyDefinition: CompanyInputDefinition!
  ): CompanyDefinition
  editCompanyDefinition(
    companyDefinition: CompanyInputDefinition!
  ): CompanyDefinition
  addCompanySessionDefinition(
    companySessionDefinition: CompanySessionInputDefinition!
  ): CompanySessionDefinition
  editCompanySessionDefinition(
    companySessionDefinition: CompanySessionInputDefinition!
  ): CompanySessionDefinition
  addImageCategory(imageCategory: ImageInputCategory!): ImageCategory
  editImageCategory(imageCategory: ImageInputCategory!): ImageCategory
  addMedicineDefinition(
    medicineDefinition: MedicineInputDefinition!
  ): MedicineDefinition
  editMedicineDefinition(
    medicineDefinition: MedicineInputDefinition!
  ): MedicineDefinition
  addPatientReport(patientReport: PatientReportInput!): PatientReport
  editPatientReport(patientReport: PatientReportInput!): PatientReport
  createOrUpdateRole(role: RoleInput!): Role!
  createBranch(branch: BranchInput!): Branch!
  createSpecialty(specialty: SpecialtyInput!): Specialty!
  createUser(user: UserInput!): User!
  addSpecialty(branchId: ID!, specialtyId: ID!): Branch!
  addDoctor(branchId: ID!, specialtyId: ID!, userId: ID!): Branch!
  assignRoleToUser(userId: ID!, roleId: ID!): Boolean
  updateConfiguration(configuration: ConfigurationInput): Configuration!
  addCourseDefinition(
    courseDefinition: CourseInputDefinition!
  ): CourseDefinition
  editCourseDefinition(
    courseDefinition: CourseInputDefinition!
  ): CourseDefinition
  addCourse(course: CourseInput!): Course!
  editCourse(
    courseId: ID!
    paid: Int!
    branchId: ID
    specialtyId: ID
    userId: ID
  ): Course!
  editCourseUnits(courseId: ID!, consumed: Int!): Course!
  editCourseDoctor(courseId: ID!, doctorId: ID!): Course!
  finishCourse(courseId: ID!): Course!
  addPayrollUser(payrollUser: PayrollUserInput!): PayrollUser!
  addTransaction(
    payrollTransaction: PayrollTransactionInput!
  ): PayrollTransaction!
  addPayroll(payment: [ID!]): Payroll!
  deletePayrollUser(userId: ID!): PayrollUser!
  updateNotes(id: ID!, notes: String!): Appointment!
  addSalesDefinition(salesDefinition: SalesInputDefinition!): SalesDefinition
  editSalesDefinition(salesDefinition: SalesInputDefinition!): SalesDefinition
  addSalesDefinitionQuantity(
    salesDefinition: SalesInputDefinition!
  ): SalesDefinition
  addSales(sales: [SalesItemsInput!]!): [Sales!]!
  editSales(sales: SalesInput!): Sales
  deleteSales(id: ID!): Sales
}

########################### Auth ##################################

type AuthPayload {
  token: String
  user: User
}

input UserLoginInput {
  email: String!
  password: String!
}

type TransctionCoursesTimeFrame {
  id: ID!
  date: Date!
  payrollUser: PayrollUser!
}

type TransctionRevenuesTimeFrame {
  id: ID!
  date: Date!
  payrollUser: PayrollUser!
}

########################### User ##################################

type User {
  id: ID!
  name: String!
  email: String!
  position: Position
  revenues: [Revenue!]
  avatar: String
  specialty: Specialty
  role: Role
}

type Permission {
  id: ID!
  action: String
  subject: String
  level: PermissionLevel!
  rules: [Rule!]
}

type Rule {
  organizationId: ID
  branchId: ID
  specialtyId: ID
  userId: ID
}

type Role {
  id: ID!
  name: String!
  users: [User!]
  permissions: [Permission!]
}

type Branch {
  id: ID!
  name: String!
  address: String
  phoneNo: String
  notes: String
  specialties: [Specialty!]
}

type Specialty {
  id: ID!
  name: String!
  branches: [Branch!]
  doctors: [User!]
}

input RoleInput {
  id: ID
  name: String!
  permissions: [PermissionInput!]!
}

input PermissionInput {
  action: String!
  all: Boolean
  level: PermissionLevel!
  rules: [PermissionRuleInput!]
}

input PermissionRuleInput {
  organizationId: ID
  branchId: ID
  specialtyId: ID
  userId: ID
}

input BranchInput {
  id: ID
  name: String!
  address: String
  phoneNo: String
  notes: String
}

input SpecialtyInput {
  id: ID
  name: String!
}

input UserInput {
  specialtyId: ID
  name: String!
  email: String!
  password: String!
  position: Position!
}

type Configuration {
  id: ID!
  enableInvoiceCounter: Boolean!
}

input ConfigurationInput {
  id: ID
  enableInvoiceCounter: Boolean!
}

########################### Search ##################################

interface Searchable {
  searchName: String!
}

type SearchResult {
  patients: [Patient!]
  snippets: [Snippet!]
}

########################### Patient ##################################

type Patient implements Searchable {
  id: ID!
  type: PatientMembershipType!
  name: String!
  searchName: String!
  phoneNo: String!
  code: String!
  codeNumber: Int!
  reference: [String!]
  area: String!
  age: Int!
  sex: Sex!
  appointments: [Appointment!]
}

input PatientInput {
  id: ID
  name: String!
  phoneNo: String!
  age: Int!
  sex: Sex!
  reference: [String]
  area: ID
  type: PatientMembershipType!
  guardianName: String
}

type PatientData {
  patients: [Patient!]
  patientsCount: Int!
}

########################### Appointment ##################################

type Appointment {
  id: ID!
  date: Date
  type: AppointmentType!
  status: AppointmentStatus!
  patient: Patient!
  branch: Branch
  specialty: Specialty
  pulses: Int
  powerOne: Int
  powerTwo: Int
  accounted: Boolean
  sessionsPulses: [SessionPulse!]
  session: SessionDefinition
  user: User!
  doctor: User!
  data: [AppointmentField!]
  notes: String
  businessNotes: String
  prescription: [Prescription!]
  pictures: [AppointmentFile!]
  userId: String
  labs: [Lab!]
  images: [Image!]
  courses: [Course!]
}

type AppointmentData {
  appointments: [Appointment!]
  appointmentsCount: Int!
}

type AppointmentsDayCount {
  totalAppointment: Int
  totalWaiting: Int
}
type AppointmentFile {
  id: ID!
  comment: String
  url: String
}

type SessionPulse {
  name: String!
  value: Int!
}

type AppointmentField {
  id: ID!
  value: JSON
  field: Field!
}

type PulseControl {
  id: ID!
  before: Int
  after: Int
  date: Date
}
input PulseControlInput {
  before: Int!
  after: Int!
}

input AppointmentInput {
  patientId: ID!
  date: Date!
  type: AppointmentType!
  userId: ID!
  branchId: ID
  specialtyId: ID
  sessionId: ID
  notes: String
  courseId: ID
  waiting: Boolean
}

input AppointmentPictureInput {
  id: ID
  comment: String
}

input UpdateAppointmentInput {
  id: ID!
  labIds: [ID!]
  imageIds: [ID!]
  powerOne: Int
  powerTwo: Int
  pulses: Int
  data: [AppointmentFieldInput!]
  notes: String
  prescription: [PrescriptionInput!]
  pictures: [AppointmentPictureInput!]
  sessionsPulses: [SessionPulseInput]
}

input AppointmentQueryInput {
  patients: [ID]
  fromDate: Date
  toDate: Date
  type: AppointmentType
}

input SessionPulseInput {
  name: String
  value: Int
}

input AppointmentFieldInput {
  id: ID
  value: JSON
  fieldId: ID!
}

########################### views ##################################

type Prescription {
  id: ID!
  medicineId: ID
  timingId: ID
  dose: String
  duration: Int
  period: String
}

input PrescriptionInput {
  medicineId: ID!
  dose: String
  timingId: ID
  duration: Int
  period: String
}

########################### Area ##################################
type Area {
  id: ID!
  governorate_id: String!
  city_name_ar: String!
  city_name_en: String!
}
########################### views ##################################
type View {
  id: ID!
  name: String
  type: AppointmentType
  default: Boolean
  user: User
  userId: String
  fieldGroups: [FieldGroup!]
}

type FieldGroup {
  id: ID!
  name: String!
  order: Int!
  fields: [Field!]
}

type Field {
  id: ID!
  name: String!
  order: Int!
  type: FieldType!
  choices: JSON
}

type ViewStatus {
  id: ID!
  user: User
  userId: String
  defaultView: View
  defaultViewId: String
  activeView: View
  activeViewId: String
}

input ViewInput {
  id: ID
  name: String!
  type: AppointmentType!
  fieldGroups: [FieldGroupInput!]
}

input FieldGroupInput {
  id: ID
  name: String!
  order: Int!
  fields: [FieldInput!]
}

input FieldInput {
  id: ID
  name: String!
  order: Int!
  type: FieldType!
  choices: JSON
}

########################### File ##################################

type File {
  id: ID!
  filename: String!
  mimetype: String
  encoding: String
  comment: String
  url: String
}

type Session {
  name: String!
  price: Int!
  number: Int!
}

input SessionInput {
  name: String!
  price: Int!
  number: Int!
}

input Discount {
  name: String!
  amount: Int!
}

input Others {
  name: String!
  amount: Int!
}

input optionInput {
  option: String
  payMethod: String!
  amount: Int
}

type CourseSessions {
  date: Date!
  time: Date!
}

input CourseSessionsInput {
  date: Date!
  time: Date!
}

########################### Snippet ##################################

type Snippet implements Searchable {
  id: ID!
  title: String!
  searchName: String!
  body: String!
}

input SnippetInput {
  title: String!
  body: String!
}

########################### Labs ##################################

type Lab {
  id: ID!
  status: LabStatus!
  requiredDate: Date!
  resultDate: Date
  value: String
  labDefinition: LabDefinition
  documents: [File!]
}

input LabInput {
  id: ID!
  value: String
  documents: [ID!]
}

########################### Patient Image ##################################

type Image {
  id: ID!
  status: LabStatus!
  requiredDate: Date!
  resultDate: Date
  value: String
  imageDefinition: ImageDefinition
  documents: [File!]
}

input ImageInput {
  id: ID!
  value: String
  documents: [ID!]
}

########################### PayrollUser ##################################

type PayrollUser {
  id: ID!
  user: User!
  salary: Int!
  netSalary: Int!
  organizationId: ID!
}

type Payslips {
  id: ID!
  name: String!
  amount: Int!
}

input PayrollUserInput {
  userId: ID!
  salary: Int!
}

########################### Payroll ##################################

type Payroll {
  id: ID!
  name: String!
  status: PayrollStatus!
  startDate: Date!
  endDate: Date!
  organization: Organization
}

type PayrollTransaction {
  id: ID!
  amount: Int!
  date: Date!
  reason: String!
  type: PayrollTransactionType
  payrollUser: PayrollUser
  payroll: Payroll
}

input PayrollTransactionInput {
  userId: ID!
  amount: Int!
  reason: String
  periodTime: [String]
  option: String
  type: PayrollTransactionType!
}

########################## History ##################################

type MedicineHistory {
  id: ID!
  medicineName: String!
  frequency: String
  dose: String
  fromDate: Date
}

type FamilyHistory {
  id: ID!
  disease: String!
  relative: String!
}

input MedicineHistoryInput {
  medicineName: String!
  frequency: String
  dose: String
  fromDate: Date
  patientId: ID!
}

input FamilyHistoryInput {
  disease: String!
  relative: String!
  patientId: ID!
}

########################### Expense ##################################

type Expense {
  id: ID!
  name: String!
  amount: Int!
  level: String
  user: User
  branch: Branch
  specialty: Specialty
  date: Date!
  expenseType: String!
  invoiceNo: String
}

input ExpenseInput {
  name: String!
  amount: Int!
  expenseType: String!
  branchId: ID
  specialtyId: ID
  userId: ID
  date: Date!
  invoiceNo: String
}

input ExpenseUpdateInput {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
}

########################### Revenue ##################################

type Revenue {
  id: ID!
  name: String!
  level: String
  user: User
  branch: Branch
  specialty: Specialty
  amount: Int!
  date: Date!
  invoiceNo: String
}

type BankRevenue {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
  bank: BankDefinition!
}

type InsuranceRevenue {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
  company: CompanyDefinition!
}

input RevenueInput {
  name: String!
  amount: Int!
  date: Date!
  expenseType: String
  branchId: ID
  specialtyId: ID
  userId: ID
  invoiceNo: String
}

input RevenueUpdateInput {
  id: ID!
  name: String!
  amount: Int!
  date: Date!
  invoiceNo: String
}

########################### Notification ##################################

type Subscription {
  notifications: Notification!
}

type Notification {
  message: String!
  viewed: Boolean!
  date: Date
}

########################### Event ##################################

type Event {
  id: ID!
  name: String!
  start: Date!
  end: Date!
}

input EventInput {
  name: String!
  start: Date!
  end: Date!
}

########################### Inventory ##################################

type Item {
  id: ID!
  name: String!
  unitOfMeasure: UnitOfMeaure
  quantity: Int!
  barcode: String
  notes: String
}

type InventoryItem {
  itemId: ID!
  userId: ID!
  quantity: Int!
  branch: Branch
  specialty: Specialty
  user: User!
  level: String!
}

type InventoryHistory {
  body: String!
  date: Date!
}

input ItemInput {
  id: ID
  name: String!
  unitOfMeasure: UnitOfMeaure
  quantity: Int!
  barcode: String
  notes: String
}

input ItemUpdateInput {
  id: ID!
  name: String!
}

input AddToInventoryInput {
  itemId: ID!
  amount: Int!
  price: Int!
  branchId: ID
  specialtyId: ID
  userId: ID
  level: String!
}

input FinishAppointmentItemInput {
  itemId: String!
  quantity: Int!
}
########################### Organization ##################################

type Organization {
  id: ID!
  name: String!
  invoiceCounter: Int!
}
########################### Hospitals ##################################

type Hospital {
  id: ID!
  name: String!
  phoneNo: String
  address: Date
  level: String!
  branch: Branch
  specialty: Specialty
  user: User
}

input HospitalInput {
  id: ID
  name: String!
  phoneNo: String
  address: Date
  userId: ID
  branchId: ID
  specialtyId: ID
}

########################### Surgeries ##################################

type Surgery {
  id: ID!
  name: String!
  level: String!
  branch: Branch
  specialty: Specialty
  user: User
}

input SurgeryInput {
  id: ID
  name: String!
  userId: ID
  branchId: ID
  specialtyId: ID
}
########################### Labs Definition ##################################

type LabDefinition {
  id: ID!
  name: String!
  category: LabCategory!
}

type LabCategory {
  id: ID!
  name: String!
}

input LabInputDefinition {
  id: ID
  name: String!
  categoryId: ID!
}

input LabCategoryInput {
  id: ID
  name: String!
}

########################### Timing ##################################

type Timing {
  id: ID!
  name: String!
  englishPrintValue: String!
  arabicPrintValue: String!
}

input TimingInput {
  id: ID
  name: String!
  englishPrintValue: String!
  arabicPrintValue: String!
}

type SessionDefinition {
  id: ID!
  name: String!
  price: Int!
  level: String!
  user: User
  branch: Branch
  specialty: Specialty
}

input SessionInputDefinition {
  id: ID
  name: String!
  price: Int!
  userId: ID
  specialtyId: ID
  branchId: ID
}

########################### Images Definition ##################################

type ImageDefinition {
  id: ID!
  name: String!
  category: ImageCategory!
}

input ImageInputDefinition {
  id: ID
  name: String!
  categoryId: ID
}

type ImageCategory {
  id: ID!
  name: String!
}

input ImageInputCategory {
  id: ID
  name: String!
}

########################### Price ##################################

type Price {
  id: ID!
  Apptype: String!
  level: String!
  price: Int!
  user: User!
  branch: Branch
  specialty: Specialty
}

input PriceInput {
  id: ID
  Apptype: String!
  price: Int!
  level: String!
  userId: ID
  branchId: ID
  specialtyId: ID
}

########################### Bank Definition ##################################

type BankDefinition {
  id: ID!
  name: String!
}

input BankInputDefinition {
  id: ID
  name: String!
}

########################### ExpenseType Definition ##################################

type ExpenseTypeDefinition {
  id: ID!
  name: String!
}

input ExpenseTypeInputDefinition {
  id: ID
  name: String!
}

########################### Company Definition ##################################

type CompanyDefinition {
  id: ID!
  name: String!
}

input CompanyInputDefinition {
  id: ID
  name: String!
}

########################### Company Definition ##################################

type CompanySessionDefinition {
  id: ID!
  company: CompanyDefinition
  name: String!
  price: Int!
}

input CompanySessionInputDefinition {
  id: ID
  companyId: ID!
  price: Int!
  name: String!
}

########################### Sales Definition ##################################

type SalesDefinition {
  id: ID!
  name: String!
  totalQuantity: Int!
  price: Int!
  cost: Int!
  user: User
  specialty: Specialty
  branch: Branch
  level: String
}

input SalesInputDefinition {
  id: ID
  name: String!
  quantity: Int
  salesId: ID
  price: Int!
  cost: Int!
  branchId: ID
  specialtyId: ID
  userId: ID
}

type Sales {
  id: ID!
  date: Date!
  salesDefinition: SalesDefinition!
  quantity: Int!
  totalPrice: Int!
  totalCost: Int!
  level: String!
  branch: Branch
  specialty: Specialty
  user: User
}

input SalesInput {
  id: ID
  items: ID!
  quantity: Int!
}

input SalesItemsInput {
  itemId: ID!
  quantity: Int!
  userId: ID
  branchId: ID
  specialtyId: ID
}

########################### Medicine Definition ##################################

type MedicineDefinition {
  id: ID!
  name: String!
  concentration: String!
  form: String!
  level: String
  branch: Branch!
  specialty: Specialty!
  user: User!
}

input MedicineInputDefinition {
  id: ID
  name: String!
  concentration: String!
  form: String
  userId: ID
  branchId: ID
  specialtyId: ID
}

########################### Patient Report ##################################

type PatientReport {
  id: ID!
  name: String!
  body: String!
}

input PatientReportInput {
  id: ID
  name: String!
  body: String!
}

########################### Course Definition ##################################

type CourseDefinition {
  id: ID!
  name: String!
  type: String!
  price: Int!
  units: Int!
  messureOfUnits: String!
}

input CourseInputDefinition {
  id: ID
  name: String!
  type: String!
  price: Int!
  units: Int!
  messureOfUnits: String
}

########################### Course  ##################################

type Course {
  id: ID!
  price: Int!
  paid: Int!
  consumed: Int!
  discount: Int!
  startDate: Date!
  endDate: Date!
  status: CourseStatus!
  sessions: [Appointment!]
  patient: Patient!
  user: User!
  doctor: User!
  courseDefinition: CourseDefinition!
}

input CourseInput {
  price: Int!
  paid: Int
  consumed: Int
  discount: Int
  patientId: ID!
  courseDefinitionId: ID!
  doctorId: ID!
  sessions: [Date!]
  branchId: ID
  specialtyId: ID
  userId: ID
}

type CoursePayment {
  id: ID!
  payment: Int!
  date: Date!
  user: User!
  course: Course!
}

########################### Patient Surgeries ##################################

type AppointmentsOnCourses {
  appointment: Appointment
  course: Course
}

type PatientSurgery {
  id: ID!
  patient: Patient
  surgery: Surgery
  hospital: Hospital
  date: Date
  fees: Int
  hospitalFees: Int
  appointment: Appointment
}

input PatientSurgeryInput {
  patientId: ID!
  surgeryId: ID!
  hospitalId: ID!
  date: Date
  fees: Int
  hospitalFees: Int
}
